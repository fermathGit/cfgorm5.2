local Root = "L:/Client"

if io and io.popen and not LuaTinker then
	local cd = io.popen( "cd" ):read( '*l' )
	print( "cd: "..cd )
	local s, e = string.find( cd, "Client" )
	if e then
		Root = string.sub( cd, 1, e )
	else
		s, e = string.find( cd, "Tool" )
		if e then
			Root = cd:sub( 1, e ).."/../Client"
		end
	end
end

if arg and arg[1] then
	Root = arg[1]
end
print( Root )
Root = string.gsub( Root, '\\', '/' )
local DatabaseRoot = Root.."/Assets/StreamingAssets/Database"
local LuaRoot = Root.."/Assets/StreamingAssets/LuaRoot"
package.path = package.path..';'..DatabaseRoot..'/?.lua'..';'.. LuaRoot..'/?.lua'

local DatabaseTool = require "DatabaseTool"
DatabaseTool.DatabaseRoot = DatabaseRoot

local MessageType = require "Net.MessageType"
local ProtoSignatureCS = DatabaseTool.DatabaseRoot.."/../../../Assets/Code/NetProto/Messages/ProtocalSignature.cs"
local ProtoSignatureLua = DatabaseTool.DatabaseRoot.."/../LuaRoot/Net/ProtocalSignature.lua"

local function hashString( v )
	local val = 0
	for i = 1, #v do
		local c = string.byte( string.sub( v, i, i ), 1 )
		val = val + c * 193951
		val = math.fmod( val, 0x7fffffff )
		val = val * 399283
		val = math.fmod( val, 0x7fffffff )
	end
	return val
end

local function removeFile( fn )
	local f = io.open( fn, "r" )
	if f then
		f:close()
		print( "remove file: "..fn )
		os.remove( fn )
	end
end

local function genProtoMarks( tofile )
	local version = 0
	local marks = {}
	local ids = {}
	for k, v in pairs( MessageType ) do
		local t = type( k )
		if t == "string" then
			local vt = type( v )
			if k == "__VERSION__" and vt == "number" then
				version = v
			elseif vt == "number" then
				local a, b, c = k:find( "MSG_(.+)" )
				local def = MessageType[v]
				if c then
					local src = string.format( "%s = %s", c, DatabaseTool.SerializeTable( def, false, true ) )
					marks[c] = {
						src, -- prototype
						hashString( src ), -- hash
						v -- ID
					}
					ids[#ids + 1] = c

				end
			end
		end
	end
	table.sort( ids )

	if tofile then
		removeFile( ProtoSignatureCS )
		removeFile( ProtoSignatureLua )
		do
			local f = io.open( ProtoSignatureCS, "wb" )
			if f then
				f:write( string.char( 0xef ) )
				f:write( string.char( 0xbb ) )
				f:write( string.char( 0xbf ) )
				f:write( "//This file generated by NetProtoVergen.lua, if you have any questions please contant to lujian.\n" )
				f:write( string.format( "//Current version: %d\n", version ) )
				f:write( "using System.Collections.Generic;\n\n" )
				f:write( "namespace Network.Messages {\n" )
				f:write( "\tpublic static class NetProtoSignatures {\n" )
				f:write( "\t\tstatic Dictionary<int, int> m_signatures = new Dictionary<int, int>();\n" )
				f:write( "\t\tpublic static int Get( int id ) {\n" )
				f:write( "\t\t\tint r = 0;\n" )
				f:write( "\t\t\tm_signatures.TryGetValue( id, out r );\n" )
				f:write( "\t\t\treturn r;\n" )
				f:write( "\t\t}\n" )
				f:write( "\t\tpublic static int Get( MessageType type ) {\n" )
				f:write( "\t\t\treturn Get( (int)type );\n" )
				f:write( "\t\t}\n" )
				f:write( "\t\tstatic NetProtoSignatures() {\n" )
				local count = 0
				for _, k in ipairs( ids ) do
					local v = marks[k]
					local s = string.format( "\t\t\tm_signatures.Add( (int)MessageType.MSG_%s, 0x%x ); //ID:%d\n", k, v[2], v[3] )
					f:write( s )
					count = count + 1
				end
				f:write( string.format( "\t\t\t//Total: %d\n", count ) )
				f:write( "\t\t}\n" )
				f:write( "\t}\n" )
				f:write( "}\n" )
				f:close()
			end
		end
		do
			f = io.open( ProtoSignatureLua, "wb" )
			if f then
				f:write( "--This file generated by NetProtoVergen.lua, if you have any questions please contant to lujian.\n" )
				f:write( "--Protocal id to signature\n" )
				f:write( string.format( "--Current version: %d\n", version ) )
				f:write( "return {\n" )
				local count = 0
				for _, k in ipairs( ids ) do
					local v = marks[k]
					f:write( string.format( "\t[%d] = 0x%x, --MSG_%s\n", v[3], v[2], k ) )
					count = count + 1
				end
				f:write( string.format( "\t--Total: %d\n", count ) )
				f:write( "}\n" )
				f:close()
			end
		end
	else
		print( "netproto version: "..version )
		print( DatabaseTool.SerializeTable( marks ) )
	end
end

genProtoMarks( true )

