//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class WingLevel {
		const string DBName = "wingLevel";
		#region members
		private int m_id = 0;
		private int m_eachCostItemId = 0;
		private int m_eachCostItemNum = 0;
		private int m_eachCostMoneyNum = 0;
		private int m_level = 0;
		private int m_model = 0;
		private int m_modelScale = 0;
		private string m_name = String.Empty;
		private int m_opening = 0;
		private int m_Quality = 0;
		private int m_show_Quality = 0;
		private int m_sort = 0;
		private string m_source = String.Empty;
		private int m_upNeedCount = 0;
		private int m_upNeedlv = 0;
		private int m_wingId = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, WingLevel> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, WingLevel>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int eachCostItemId { get { return m_eachCostItemId; } }
		public int eachCostItemNum { get { return m_eachCostItemNum; } }
		public int eachCostMoneyNum { get { return m_eachCostMoneyNum; } }
		public int level { get { return m_level; } }
		public int model { get { return m_model; } }
		public int modelScale { get { return m_modelScale; } }
		public string name { get { return m_name; } }
		public int opening { get { return m_opening; } }
		public int Quality { get { return m_Quality; } }
		public int show_Quality { get { return m_show_Quality; } }
		public int sort { get { return m_sort; } }
		public string source { get { return m_source; } }
		public int upNeedCount { get { return m_upNeedCount; } }
		public int upNeedlv { get { return m_upNeedlv; } }
		public int wingId { get { return m_wingId; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static WingLevel __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static WingLevel() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( WingLevel ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, WingLevel> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static WingLevel ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new WingLevel();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_eachCostItemId = __mask[ 10 ] ? q.GetInt( DBCache.FID_eachCostItemId, 14 ) : __default.m_eachCostItemId;
				temp.m_eachCostItemNum = __mask[ 11 ] ? q.GetInt( DBCache.FID_eachCostItemNum, 15 ) : __default.m_eachCostItemNum;
				temp.m_eachCostMoneyNum = __mask[ 12 ] ? q.GetInt( DBCache.FID_eachCostMoneyNum, 16 ) : __default.m_eachCostMoneyNum;
				temp.m_level = __mask[ 13 ] ? q.GetInt( DBCache.FID_level, 5 ) : __default.m_level;
				temp.m_model = __mask[ 15 ] ? q.GetInt( DBCache.FID_model, 5 ) : __default.m_model;
				temp.m_modelScale = __mask[ 16 ] ? q.GetInt( DBCache.FID_modelScale, 10 ) : __default.m_modelScale;
				temp.m_name = __mask[ 17 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_name, 4 ) : __default.m_name;
				temp.m_opening = __mask[ 18 ] ? q.GetInt( DBCache.FID_opening, 7 ) : __default.m_opening;
				temp.m_Quality = __mask[ 19 ] ? q.GetInt( DBCache.FID_Quality, 7 ) : __default.m_Quality;
				temp.m_show_Quality = __mask[ 20 ] ? q.GetInt( DBCache.FID_show_Quality, 12 ) : __default.m_show_Quality;
				temp.m_sort = __mask[ 21 ] ? q.GetInt( DBCache.FID_sort, 4 ) : __default.m_sort;
				temp.m_source = __mask[ 22 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_source, 6 ) : __default.m_source;
				temp.m_upNeedCount = __mask[ 25 ] ? q.GetInt( DBCache.FID_upNeedCount, 11 ) : __default.m_upNeedCount;
				temp.m_upNeedlv = __mask[ 26 ] ? q.GetInt( DBCache.FID_upNeedlv, 8 ) : __default.m_upNeedlv;
				temp.m_wingId = __mask[ 27 ] ? q.GetInt( DBCache.FID_wingId, 6 ) : __default.m_wingId;
				WingLevelEx.IsValid_att1 = __mask[ 0 ];
				WingLevelEx.IsValid_att2 = __mask[ 1 ];
				WingLevelEx.IsValid_att3 = __mask[ 2 ];
				WingLevelEx.IsValid_att4 = __mask[ 3 ];
				WingLevelEx.IsValid_att5 = __mask[ 4 ];
				WingLevelEx.IsValid_basic_att1 = __mask[ 5 ];
				WingLevelEx.IsValid_basic_att2 = __mask[ 6 ];
				WingLevelEx.IsValid_basic_att3 = __mask[ 7 ];
				WingLevelEx.IsValid_basic_att4 = __mask[ 8 ];
				WingLevelEx.IsValid_basic_att5 = __mask[ 9 ];
				WingLevelEx.IsValid_levelAtt = __mask[ 14 ];
				WingLevelEx.IsValid_upLevelCostItemes1 = __mask[ 23 ];
				WingLevelEx.IsValid_upLevelCostItemes2 = __mask[ 24 ];
				if ( WingLevelEx.onLoadComplexField_att1 != null ) {
					WingLevelEx.onLoadComplexField_att1( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_att2 != null ) {
					WingLevelEx.onLoadComplexField_att2( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_att3 != null ) {
					WingLevelEx.onLoadComplexField_att3( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_att4 != null ) {
					WingLevelEx.onLoadComplexField_att4( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_att5 != null ) {
					WingLevelEx.onLoadComplexField_att5( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_basic_att1 != null ) {
					WingLevelEx.onLoadComplexField_basic_att1( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_basic_att2 != null ) {
					WingLevelEx.onLoadComplexField_basic_att2( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_basic_att3 != null ) {
					WingLevelEx.onLoadComplexField_basic_att3( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_basic_att4 != null ) {
					WingLevelEx.onLoadComplexField_basic_att4( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_basic_att5 != null ) {
					WingLevelEx.onLoadComplexField_basic_att5( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_levelAtt != null ) {
					WingLevelEx.onLoadComplexField_levelAtt( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_upLevelCostItemes1 != null ) {
					WingLevelEx.onLoadComplexField_upLevelCostItemes1( temp, q );
				}
				if ( WingLevelEx.onLoadComplexField_upLevelCostItemes2 != null ) {
					WingLevelEx.onLoadComplexField_upLevelCostItemes2( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static WingLevel Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			WingLevel ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x1b1750e0;
		#endregion
	}

	public partial class WingLevelEx {
		public delegate void LoadComplexField( WingLevel data, LuaDatabase.Query q );
		internal static bool IsValid_att1 = true;
		static LoadComplexField OnLoadComplexField_att1 = null;
		public static LoadComplexField onLoadComplexField_att1 {
			get {
				return OnLoadComplexField_att1;
			}
		}
		internal static bool IsValid_att2 = true;
		static LoadComplexField OnLoadComplexField_att2 = null;
		public static LoadComplexField onLoadComplexField_att2 {
			get {
				return OnLoadComplexField_att2;
			}
		}
		internal static bool IsValid_att3 = true;
		static LoadComplexField OnLoadComplexField_att3 = null;
		public static LoadComplexField onLoadComplexField_att3 {
			get {
				return OnLoadComplexField_att3;
			}
		}
		internal static bool IsValid_att4 = true;
		static LoadComplexField OnLoadComplexField_att4 = null;
		public static LoadComplexField onLoadComplexField_att4 {
			get {
				return OnLoadComplexField_att4;
			}
		}
		internal static bool IsValid_att5 = true;
		static LoadComplexField OnLoadComplexField_att5 = null;
		public static LoadComplexField onLoadComplexField_att5 {
			get {
				return OnLoadComplexField_att5;
			}
		}
		internal static bool IsValid_basic_att1 = true;
		static LoadComplexField OnLoadComplexField_basic_att1 = null;
		public static LoadComplexField onLoadComplexField_basic_att1 {
			get {
				return OnLoadComplexField_basic_att1;
			}
		}
		internal static bool IsValid_basic_att2 = true;
		static LoadComplexField OnLoadComplexField_basic_att2 = null;
		public static LoadComplexField onLoadComplexField_basic_att2 {
			get {
				return OnLoadComplexField_basic_att2;
			}
		}
		internal static bool IsValid_basic_att3 = true;
		static LoadComplexField OnLoadComplexField_basic_att3 = null;
		public static LoadComplexField onLoadComplexField_basic_att3 {
			get {
				return OnLoadComplexField_basic_att3;
			}
		}
		internal static bool IsValid_basic_att4 = true;
		static LoadComplexField OnLoadComplexField_basic_att4 = null;
		public static LoadComplexField onLoadComplexField_basic_att4 {
			get {
				return OnLoadComplexField_basic_att4;
			}
		}
		internal static bool IsValid_basic_att5 = true;
		static LoadComplexField OnLoadComplexField_basic_att5 = null;
		public static LoadComplexField onLoadComplexField_basic_att5 {
			get {
				return OnLoadComplexField_basic_att5;
			}
		}
		internal static bool IsValid_levelAtt = true;
		static LoadComplexField OnLoadComplexField_levelAtt = null;
		public static LoadComplexField onLoadComplexField_levelAtt {
			get {
				return OnLoadComplexField_levelAtt;
			}
		}
		internal static bool IsValid_upLevelCostItemes1 = true;
		static LoadComplexField OnLoadComplexField_upLevelCostItemes1 = null;
		public static LoadComplexField onLoadComplexField_upLevelCostItemes1 {
			get {
				return OnLoadComplexField_upLevelCostItemes1;
			}
		}
		internal static bool IsValid_upLevelCostItemes2 = true;
		static LoadComplexField OnLoadComplexField_upLevelCostItemes2 = null;
		public static LoadComplexField onLoadComplexField_upLevelCostItemes2 {
			get {
				return OnLoadComplexField_upLevelCostItemes2;
			}
		}
	}
}
//EOF
