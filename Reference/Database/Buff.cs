//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Buff {
		const string DBName = "skillbuff";
		#region members
		private int m_id = 0;
		private int m_BuffDeathdel = 0;
		private int m_BuffDelay = 0;
		private string m_BuffDescribe = String.Empty;
		private int m_BuffDuration = 0;
		private int m_BuffEffect = 0;
		private int m_BuffICON = 0;
		private string m_BuffName = String.Empty;
		private float m_BuffParam1 = 0;
		private int m_BuffParam2 = 0;
		private int m_BuffParam3 = 0;
		private int m_BuffParam4 = 0;
		private int m_BuffParam5 = 0;
		private int m_BuffRemove = 0;
		private string m_BuffSfx = String.Empty;
		private string m_BuffSfx_cast = String.Empty;
		private int m_BuffSfx_casttime = 0;
		private string m_BuffSfxSlots = String.Empty;
		private string m_BuffSfxSlots_cast = String.Empty;
		private int m_Buffstore = 0;
		private int m_BuffType = 0;
		private int m_DamageType = 0;
		private int m_Duration_display = 0;
		private int m_MutexGroup = 0;
		private int m_MutexLevel = 0;
		private int m_OneBuffMultiCaster = 0;
		private int m_OutSenceDel = 0;
		private int m_SfxFollowonly = 0;
		private int m_SfxScal = 0;
		private int m_showall = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Buff> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Buff>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int BuffDeathdel { get { return m_BuffDeathdel; } }
		public int BuffDelay { get { return m_BuffDelay; } }
		public string BuffDescribe { get { return m_BuffDescribe; } }
		public int BuffDuration { get { return m_BuffDuration; } }
		public int BuffEffect { get { return m_BuffEffect; } }
		public int BuffICON { get { return m_BuffICON; } }
		public string BuffName { get { return m_BuffName; } }
		public float BuffParam1 { get { return m_BuffParam1; } }
		public int BuffParam2 { get { return m_BuffParam2; } }
		public int BuffParam3 { get { return m_BuffParam3; } }
		public int BuffParam4 { get { return m_BuffParam4; } }
		public int BuffParam5 { get { return m_BuffParam5; } }
		public int BuffRemove { get { return m_BuffRemove; } }
		public string BuffSfx { get { return m_BuffSfx; } }
		public string BuffSfx_cast { get { return m_BuffSfx_cast; } }
		public int BuffSfx_casttime { get { return m_BuffSfx_casttime; } }
		public string BuffSfxSlots { get { return m_BuffSfxSlots; } }
		public string BuffSfxSlots_cast { get { return m_BuffSfxSlots_cast; } }
		public int Buffstore { get { return m_Buffstore; } }
		public int BuffType { get { return m_BuffType; } }
		public int DamageType { get { return m_DamageType; } }
		public int Duration_display { get { return m_Duration_display; } }
		public int MutexGroup { get { return m_MutexGroup; } }
		public int MutexLevel { get { return m_MutexLevel; } }
		public int OneBuffMultiCaster { get { return m_OneBuffMultiCaster; } }
		public int OutSenceDel { get { return m_OutSenceDel; } }
		public int SfxFollowonly { get { return m_SfxFollowonly; } }
		public int SfxScal { get { return m_SfxScal; } }
		public int showall { get { return m_showall; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Buff __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Buff() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Buff ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Buff> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Buff ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Buff();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_BuffDeathdel = __mask[ 0 ] ? q.GetInt( DBCache.FID_BuffDeathdel, 12 ) : __default.m_BuffDeathdel;
				temp.m_BuffDelay = __mask[ 1 ] ? q.GetInt( DBCache.FID_BuffDelay, 9 ) : __default.m_BuffDelay;
				temp.m_BuffDescribe = __mask[ 2 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_BuffDescribe, 12 ) : __default.m_BuffDescribe;
				temp.m_BuffDuration = __mask[ 3 ] ? q.GetInt( DBCache.FID_BuffDuration, 12 ) : __default.m_BuffDuration;
				temp.m_BuffEffect = __mask[ 4 ] ? q.GetInt( DBCache.FID_BuffEffect, 10 ) : __default.m_BuffEffect;
				temp.m_BuffICON = __mask[ 5 ] ? q.GetInt( DBCache.FID_BuffICON, 8 ) : __default.m_BuffICON;
				temp.m_BuffName = __mask[ 6 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_BuffName, 8 ) : __default.m_BuffName;
				temp.m_BuffParam1 = __mask[ 7 ] ? q.GetFloat( DBCache.FID_BuffParam1, 10 ) : __default.m_BuffParam1;
				temp.m_BuffParam2 = __mask[ 8 ] ? q.GetInt( DBCache.FID_BuffParam2, 10 ) : __default.m_BuffParam2;
				temp.m_BuffParam3 = __mask[ 9 ] ? q.GetInt( DBCache.FID_BuffParam3, 10 ) : __default.m_BuffParam3;
				temp.m_BuffParam4 = __mask[ 10 ] ? q.GetInt( DBCache.FID_BuffParam4, 10 ) : __default.m_BuffParam4;
				temp.m_BuffParam5 = __mask[ 11 ] ? q.GetInt( DBCache.FID_BuffParam5, 10 ) : __default.m_BuffParam5;
				temp.m_BuffRemove = __mask[ 12 ] ? q.GetInt( DBCache.FID_BuffRemove, 10 ) : __default.m_BuffRemove;
				temp.m_BuffSfx = __mask[ 13 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_BuffSfx, 7 ) : __default.m_BuffSfx;
				temp.m_BuffSfx_cast = __mask[ 14 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_BuffSfx_cast, 12 ) : __default.m_BuffSfx_cast;
				temp.m_BuffSfx_casttime = __mask[ 15 ] ? q.GetInt( DBCache.FID_BuffSfx_casttime, 16 ) : __default.m_BuffSfx_casttime;
				temp.m_BuffSfxSlots = __mask[ 16 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_BuffSfxSlots, 12 ) : __default.m_BuffSfxSlots;
				temp.m_BuffSfxSlots_cast = __mask[ 17 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_BuffSfxSlots_cast, 17 ) : __default.m_BuffSfxSlots_cast;
				temp.m_Buffstore = __mask[ 18 ] ? q.GetInt( DBCache.FID_Buffstore, 9 ) : __default.m_Buffstore;
				temp.m_BuffType = __mask[ 19 ] ? q.GetInt( DBCache.FID_BuffType, 8 ) : __default.m_BuffType;
				temp.m_DamageType = __mask[ 20 ] ? q.GetInt( DBCache.FID_DamageType, 10 ) : __default.m_DamageType;
				temp.m_Duration_display = __mask[ 21 ] ? q.GetInt( DBCache.FID_Duration_display, 16 ) : __default.m_Duration_display;
				temp.m_MutexGroup = __mask[ 22 ] ? q.GetInt( DBCache.FID_MutexGroup, 10 ) : __default.m_MutexGroup;
				temp.m_MutexLevel = __mask[ 23 ] ? q.GetInt( DBCache.FID_MutexLevel, 10 ) : __default.m_MutexLevel;
				temp.m_OneBuffMultiCaster = __mask[ 24 ] ? q.GetInt( DBCache.FID_OneBuffMultiCaster, 18 ) : __default.m_OneBuffMultiCaster;
				temp.m_OutSenceDel = __mask[ 25 ] ? q.GetInt( DBCache.FID_OutSenceDel, 11 ) : __default.m_OutSenceDel;
				temp.m_SfxFollowonly = __mask[ 27 ] ? q.GetInt( DBCache.FID_SfxFollowonly, 13 ) : __default.m_SfxFollowonly;
				temp.m_SfxScal = __mask[ 28 ] ? q.GetInt( DBCache.FID_SfxScal, 7 ) : __default.m_SfxScal;
				temp.m_showall = __mask[ 29 ] ? q.GetInt( DBCache.FID_showall, 7 ) : __default.m_showall;
				BuffEx.IsValid_Property = __mask[ 26 ];
				if ( BuffEx.onLoadComplexField_Property != null ) {
					BuffEx.onLoadComplexField_Property( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Buff Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Buff ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x1f23732d;
		#endregion
	}

	public partial class BuffEx {
		public delegate void LoadComplexField( Buff data, LuaDatabase.Query q );
		internal static bool IsValid_Property = true;
		static LoadComplexField OnLoadComplexField_Property = null;
		public static LoadComplexField onLoadComplexField_Property {
			get {
				return OnLoadComplexField_Property;
			}
		}
	}
}
//EOF
