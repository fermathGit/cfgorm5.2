//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Monster {
		const string DBName = "monster";
		#region members
		private int m_id = 0;
		private int m_add_anger = 0;
		private int m_atk_all = 0;
		private int m_atk_mag = 0;
		private int m_atk_phy = 0;
		private int m_attackdelay = 0;
		private int m_attackdelay_ex = 0;
		private int m_battle_power = 0;
		private int m_battle_power_count = 0;
		private int m_born_cam_angle = 0;
		private int m_born_cam_dis = 0;
		private float m_born_cam_offset = 0;
		private int m_born_camtime1 = 0;
		private int m_born_camtime2 = 0;
		private string m_born_music = String.Empty;
		private string m_born_speech = String.Empty;
		private int m_born_time = 0;
		private int m_born_tips = 0;
		private string m_born_vfx = String.Empty;
		private int m_def_basemag_plus = 0;
		private int m_def_mag = 0;
		private int m_def_phy = 0;
		private int m_drop_gold = 0;
		private int m_forceshow = 0;
		private int m_hitaway = 0;
		private int m_hp_specialshow = 0;
		private int m_hp_type = 0;
		private int m_hpmax = 0;
		private int m_icon = 0;
		private int m_kill_notice = 0;
		private int m_kill_slowcam = 0;
		private int m_livetime = 0;
		private int m_minimapshow = 0;
		private int m_modelid = 0;
		private float m_modelradius = 0;
		private float m_modelscal = 0;
		private int m_monster_name_show = 0;
		private int m_monstercamp = 0;
		private int m_monsterface = 0;
		private int m_monsterfriend = 0;
		private int m_monsterlv = 0;
		private int m_monstertype = 0;
		private float m_movespeed = 0;
		private string m_name = String.Empty;
		private string m_rim_color = String.Empty;
		private float m_RunSpeedBase = 0;
		private float m_RunSpeedScale = 0;
		private int m_show1 = 0;
		private int m_show_lv = 0;
		private int m_show_vfx = 0;
		private string m_showname = String.Empty;
		private string m_sleep_anim = String.Empty;
		private string m_sleep_vfx = String.Empty;
		private string m_sound_die = String.Empty;
		private int m_sound_die_rate = 0;
		private int m_specialmod = 0;
		private int m_Viewangle = 0;
		private float m_watchradius = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Monster> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Monster>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int add_anger { get { return m_add_anger; } }
		public int atk_all { get { return m_atk_all; } }
		public int atk_mag { get { return m_atk_mag; } }
		public int atk_phy { get { return m_atk_phy; } }
		public int attackdelay { get { return m_attackdelay; } }
		public int attackdelay_ex { get { return m_attackdelay_ex; } }
		public int battle_power { get { return m_battle_power; } }
		public int battle_power_count { get { return m_battle_power_count; } }
		public int born_cam_angle { get { return m_born_cam_angle; } }
		public int born_cam_dis { get { return m_born_cam_dis; } }
		public float born_cam_offset { get { return m_born_cam_offset; } }
		public int born_camtime1 { get { return m_born_camtime1; } }
		public int born_camtime2 { get { return m_born_camtime2; } }
		public string born_music { get { return m_born_music; } }
		public string born_speech { get { return m_born_speech; } }
		public int born_time { get { return m_born_time; } }
		public int born_tips { get { return m_born_tips; } }
		public string born_vfx { get { return m_born_vfx; } }
		public int def_basemag_plus { get { return m_def_basemag_plus; } }
		public int def_mag { get { return m_def_mag; } }
		public int def_phy { get { return m_def_phy; } }
		public int drop_gold { get { return m_drop_gold; } }
		public int forceshow { get { return m_forceshow; } }
		public int hitaway { get { return m_hitaway; } }
		public int hp_specialshow { get { return m_hp_specialshow; } }
		public int hp_type { get { return m_hp_type; } }
		public int hpmax { get { return m_hpmax; } }
		public int icon { get { return m_icon; } }
		public int kill_notice { get { return m_kill_notice; } }
		public int kill_slowcam { get { return m_kill_slowcam; } }
		public int livetime { get { return m_livetime; } }
		public int minimapshow { get { return m_minimapshow; } }
		public int modelid { get { return m_modelid; } }
		public float modelradius { get { return m_modelradius; } }
		public float modelscal { get { return m_modelscal; } }
		public int monster_name_show { get { return m_monster_name_show; } }
		public int monstercamp { get { return m_monstercamp; } }
		public int monsterface { get { return m_monsterface; } }
		public int monsterfriend { get { return m_monsterfriend; } }
		public int monsterlv { get { return m_monsterlv; } }
		public int monstertype { get { return m_monstertype; } }
		public float movespeed { get { return m_movespeed; } }
		public string name { get { return m_name; } }
		public string rim_color { get { return m_rim_color; } }
		public float RunSpeedBase { get { return m_RunSpeedBase; } }
		public float RunSpeedScale { get { return m_RunSpeedScale; } }
		public int show1 { get { return m_show1; } }
		public int show_lv { get { return m_show_lv; } }
		public int show_vfx { get { return m_show_vfx; } }
		public string showname { get { return m_showname; } }
		public string sleep_anim { get { return m_sleep_anim; } }
		public string sleep_vfx { get { return m_sleep_vfx; } }
		public string sound_die { get { return m_sound_die; } }
		public int sound_die_rate { get { return m_sound_die_rate; } }
		public int specialmod { get { return m_specialmod; } }
		public int Viewangle { get { return m_Viewangle; } }
		public float watchradius { get { return m_watchradius; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Monster __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Monster() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Monster ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Monster> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Monster ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Monster();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_add_anger = __mask[ 0 ] ? q.GetInt( DBCache.FID_add_anger, 9 ) : __default.m_add_anger;
				temp.m_atk_all = __mask[ 1 ] ? q.GetInt( DBCache.FID_atk_all, 7 ) : __default.m_atk_all;
				temp.m_atk_mag = __mask[ 2 ] ? q.GetInt( DBCache.FID_atk_mag, 7 ) : __default.m_atk_mag;
				temp.m_atk_phy = __mask[ 3 ] ? q.GetInt( DBCache.FID_atk_phy, 7 ) : __default.m_atk_phy;
				temp.m_attackdelay = __mask[ 4 ] ? q.GetInt( DBCache.FID_attackdelay, 11 ) : __default.m_attackdelay;
				temp.m_attackdelay_ex = __mask[ 5 ] ? q.GetInt( DBCache.FID_attackdelay_ex, 14 ) : __default.m_attackdelay_ex;
				temp.m_battle_power = __mask[ 6 ] ? q.GetInt( DBCache.FID_battle_power, 12 ) : __default.m_battle_power;
				temp.m_battle_power_count = __mask[ 7 ] ? q.GetInt( DBCache.FID_battle_power_count, 18 ) : __default.m_battle_power_count;
				temp.m_born_cam_angle = __mask[ 8 ] ? q.GetInt( DBCache.FID_born_cam_angle, 14 ) : __default.m_born_cam_angle;
				temp.m_born_cam_dis = __mask[ 9 ] ? q.GetInt( DBCache.FID_born_cam_dis, 12 ) : __default.m_born_cam_dis;
				temp.m_born_cam_offset = __mask[ 10 ] ? q.GetFloat( DBCache.FID_born_cam_offset, 15 ) : __default.m_born_cam_offset;
				temp.m_born_camtime1 = __mask[ 11 ] ? q.GetInt( DBCache.FID_born_camtime1, 13 ) : __default.m_born_camtime1;
				temp.m_born_camtime2 = __mask[ 12 ] ? q.GetInt( DBCache.FID_born_camtime2, 13 ) : __default.m_born_camtime2;
				temp.m_born_music = __mask[ 13 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_born_music, 10 ) : __default.m_born_music;
				temp.m_born_speech = __mask[ 14 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_born_speech, 11 ) : __default.m_born_speech;
				temp.m_born_time = __mask[ 15 ] ? q.GetInt( DBCache.FID_born_time, 9 ) : __default.m_born_time;
				temp.m_born_tips = __mask[ 16 ] ? q.GetInt( DBCache.FID_born_tips, 9 ) : __default.m_born_tips;
				temp.m_born_vfx = __mask[ 17 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_born_vfx, 8 ) : __default.m_born_vfx;
				temp.m_def_basemag_plus = __mask[ 18 ] ? q.GetInt( DBCache.FID_def_basemag_plus, 16 ) : __default.m_def_basemag_plus;
				temp.m_def_mag = __mask[ 19 ] ? q.GetInt( DBCache.FID_def_mag, 7 ) : __default.m_def_mag;
				temp.m_def_phy = __mask[ 20 ] ? q.GetInt( DBCache.FID_def_phy, 7 ) : __default.m_def_phy;
				temp.m_drop_gold = __mask[ 22 ] ? q.GetInt( DBCache.FID_drop_gold, 9 ) : __default.m_drop_gold;
				temp.m_forceshow = __mask[ 23 ] ? q.GetInt( DBCache.FID_forceshow, 9 ) : __default.m_forceshow;
				temp.m_hitaway = __mask[ 24 ] ? q.GetInt( DBCache.FID_hitaway, 7 ) : __default.m_hitaway;
				temp.m_hp_specialshow = __mask[ 25 ] ? q.GetInt( DBCache.FID_hp_specialshow, 14 ) : __default.m_hp_specialshow;
				temp.m_hp_type = __mask[ 26 ] ? q.GetInt( DBCache.FID_hp_type, 7 ) : __default.m_hp_type;
				temp.m_hpmax = __mask[ 27 ] ? q.GetInt( DBCache.FID_hpmax, 5 ) : __default.m_hpmax;
				temp.m_icon = __mask[ 28 ] ? q.GetInt( DBCache.FID_icon, 4 ) : __default.m_icon;
				temp.m_kill_notice = __mask[ 29 ] ? q.GetInt( DBCache.FID_kill_notice, 11 ) : __default.m_kill_notice;
				temp.m_kill_slowcam = __mask[ 30 ] ? q.GetInt( DBCache.FID_kill_slowcam, 12 ) : __default.m_kill_slowcam;
				temp.m_livetime = __mask[ 31 ] ? q.GetInt( DBCache.FID_livetime, 8 ) : __default.m_livetime;
				temp.m_minimapshow = __mask[ 32 ] ? q.GetInt( DBCache.FID_minimapshow, 11 ) : __default.m_minimapshow;
				temp.m_modelid = __mask[ 33 ] ? q.GetInt( DBCache.FID_modelid, 7 ) : __default.m_modelid;
				temp.m_modelradius = __mask[ 34 ] ? q.GetFloat( DBCache.FID_modelradius, 11 ) : __default.m_modelradius;
				temp.m_modelscal = __mask[ 35 ] ? q.GetFloat( DBCache.FID_modelscal, 9 ) : __default.m_modelscal;
				temp.m_monster_name_show = __mask[ 42 ] ? q.GetInt( DBCache.FID_monster_name_show, 17 ) : __default.m_monster_name_show;
				temp.m_monstercamp = __mask[ 44 ] ? q.GetInt( DBCache.FID_monstercamp, 11 ) : __default.m_monstercamp;
				temp.m_monsterface = __mask[ 45 ] ? q.GetInt( DBCache.FID_monsterface, 11 ) : __default.m_monsterface;
				temp.m_monsterfriend = __mask[ 46 ] ? q.GetInt( DBCache.FID_monsterfriend, 13 ) : __default.m_monsterfriend;
				temp.m_monsterlv = __mask[ 47 ] ? q.GetInt( DBCache.FID_monsterlv, 9 ) : __default.m_monsterlv;
				temp.m_monstertype = __mask[ 48 ] ? q.GetInt( DBCache.FID_monstertype, 11 ) : __default.m_monstertype;
				temp.m_movespeed = __mask[ 49 ] ? q.GetFloat( DBCache.FID_movespeed, 9 ) : __default.m_movespeed;
				temp.m_name = __mask[ 50 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_name, 4 ) : __default.m_name;
				temp.m_rim_color = __mask[ 52 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_rim_color, 9 ) : __default.m_rim_color;
				temp.m_RunSpeedBase = __mask[ 53 ] ? q.GetFloat( DBCache.FID_RunSpeedBase, 12 ) : __default.m_RunSpeedBase;
				temp.m_RunSpeedScale = __mask[ 54 ] ? q.GetFloat( DBCache.FID_RunSpeedScale, 13 ) : __default.m_RunSpeedScale;
				temp.m_show1 = __mask[ 55 ] ? q.GetInt( DBCache.FID_show1, 5 ) : __default.m_show1;
				temp.m_show_lv = __mask[ 57 ] ? q.GetInt( DBCache.FID_show_lv, 7 ) : __default.m_show_lv;
				temp.m_show_vfx = __mask[ 58 ] ? q.GetInt( DBCache.FID_show_vfx, 8 ) : __default.m_show_vfx;
				temp.m_showname = __mask[ 59 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_showname, 8 ) : __default.m_showname;
				temp.m_sleep_anim = __mask[ 60 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_sleep_anim, 10 ) : __default.m_sleep_anim;
				temp.m_sleep_vfx = __mask[ 61 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_sleep_vfx, 9 ) : __default.m_sleep_vfx;
				temp.m_sound_die = __mask[ 62 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_sound_die, 9 ) : __default.m_sound_die;
				temp.m_sound_die_rate = __mask[ 63 ] ? q.GetInt( DBCache.FID_sound_die_rate, 14 ) : __default.m_sound_die_rate;
				temp.m_specialmod = __mask[ 64 ] ? q.GetInt( DBCache.FID_specialmod, 10 ) : __default.m_specialmod;
				temp.m_Viewangle = __mask[ 65 ] ? q.GetInt( DBCache.FID_Viewangle, 9 ) : __default.m_Viewangle;
				temp.m_watchradius = __mask[ 66 ] ? q.GetFloat( DBCache.FID_watchradius, 11 ) : __default.m_watchradius;
				MonsterEx.IsValid_drop = __mask[ 21 ];
				MonsterEx.IsValid_monster_baseskill = __mask[ 36 ];
				MonsterEx.IsValid_monster_buff = __mask[ 37 ];
				MonsterEx.IsValid_monster_exskill = __mask[ 38 ];
				MonsterEx.IsValid_monster_exskillweight = __mask[ 39 ];
				MonsterEx.IsValid_monster_HPtrigskill = __mask[ 40 ];
				MonsterEx.IsValid_monster_HPuseskill = __mask[ 41 ];
				MonsterEx.IsValid_monster_trigskill = __mask[ 43 ];
				MonsterEx.IsValid_patrolcd = __mask[ 51 ];
				MonsterEx.IsValid_show4 = __mask[ 56 ];
				if ( MonsterEx.onLoadComplexField_drop != null ) {
					MonsterEx.onLoadComplexField_drop( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_monster_baseskill != null ) {
					MonsterEx.onLoadComplexField_monster_baseskill( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_monster_buff != null ) {
					MonsterEx.onLoadComplexField_monster_buff( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_monster_exskill != null ) {
					MonsterEx.onLoadComplexField_monster_exskill( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_monster_exskillweight != null ) {
					MonsterEx.onLoadComplexField_monster_exskillweight( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_monster_HPtrigskill != null ) {
					MonsterEx.onLoadComplexField_monster_HPtrigskill( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_monster_HPuseskill != null ) {
					MonsterEx.onLoadComplexField_monster_HPuseskill( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_monster_trigskill != null ) {
					MonsterEx.onLoadComplexField_monster_trigskill( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_patrolcd != null ) {
					MonsterEx.onLoadComplexField_patrolcd( temp, q );
				}
				if ( MonsterEx.onLoadComplexField_show4 != null ) {
					MonsterEx.onLoadComplexField_show4( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Monster Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Monster ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x1932e0a6;
		#endregion
	}

	public partial class MonsterEx {
		public delegate void LoadComplexField( Monster data, LuaDatabase.Query q );
		internal static bool IsValid_drop = true;
		static LoadComplexField OnLoadComplexField_drop = null;
		public static LoadComplexField onLoadComplexField_drop {
			get {
				return OnLoadComplexField_drop;
			}
		}
		internal static bool IsValid_monster_baseskill = true;
		static LoadComplexField OnLoadComplexField_monster_baseskill = null;
		public static LoadComplexField onLoadComplexField_monster_baseskill {
			get {
				return OnLoadComplexField_monster_baseskill;
			}
		}
		internal static bool IsValid_monster_buff = true;
		static LoadComplexField OnLoadComplexField_monster_buff = null;
		public static LoadComplexField onLoadComplexField_monster_buff {
			get {
				return OnLoadComplexField_monster_buff;
			}
		}
		internal static bool IsValid_monster_exskill = true;
		static LoadComplexField OnLoadComplexField_monster_exskill = null;
		public static LoadComplexField onLoadComplexField_monster_exskill {
			get {
				return OnLoadComplexField_monster_exskill;
			}
		}
		internal static bool IsValid_monster_exskillweight = true;
		static LoadComplexField OnLoadComplexField_monster_exskillweight = null;
		public static LoadComplexField onLoadComplexField_monster_exskillweight {
			get {
				return OnLoadComplexField_monster_exskillweight;
			}
		}
		internal static bool IsValid_monster_HPtrigskill = true;
		static LoadComplexField OnLoadComplexField_monster_HPtrigskill = null;
		public static LoadComplexField onLoadComplexField_monster_HPtrigskill {
			get {
				return OnLoadComplexField_monster_HPtrigskill;
			}
		}
		internal static bool IsValid_monster_HPuseskill = true;
		static LoadComplexField OnLoadComplexField_monster_HPuseskill = null;
		public static LoadComplexField onLoadComplexField_monster_HPuseskill {
			get {
				return OnLoadComplexField_monster_HPuseskill;
			}
		}
		internal static bool IsValid_monster_trigskill = true;
		static LoadComplexField OnLoadComplexField_monster_trigskill = null;
		public static LoadComplexField onLoadComplexField_monster_trigskill {
			get {
				return OnLoadComplexField_monster_trigskill;
			}
		}
		internal static bool IsValid_patrolcd = true;
		static LoadComplexField OnLoadComplexField_patrolcd = null;
		public static LoadComplexField onLoadComplexField_patrolcd {
			get {
				return OnLoadComplexField_patrolcd;
			}
		}
		internal static bool IsValid_show4 = true;
		static LoadComplexField OnLoadComplexField_show4 = null;
		public static LoadComplexField onLoadComplexField_show4 {
			get {
				return OnLoadComplexField_show4;
			}
		}
	}
}
//EOF
