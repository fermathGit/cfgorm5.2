//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Task {
		const string DBName = "task";
		#region members
		private int m_id = 0;
		private int m_addanger = 0;
		private int m_addbuf = 0;
		private int m_auto_commit = 0;
		private int m_auto_findpath = 0;
		private string m_commit_speech = String.Empty;
		private string m_cutscene = String.Empty;
		private int m_dailytask_group = 0;
		private int m_finish_vfx = 0;
		private int m_front_id = 0;
		private int m_guideParm = 0;
		private int m_ifshowguide = 0;
		private int m_iftop = 0;
		private int m_maps = 0;
		private int m_needSave = 0;
		private int m_percentage = 0;
		private int m_playpoint1 = 0;
		private int m_playpoint2 = 0;
		private int m_playpoint3 = 0;
		private int m_preloadmap = 0;
		private int m_rate_advance = 0;
		private int m_show_type1 = 0;
		private int m_show_type2 = 0;
		private int m_showlevel = 0;
		private int m_soul_id = 0;
		private int m_target_openboard = 0;
		private int m_target_openboard_sub = 0;
		private int m_target_subpara1 = 0;
		private int m_target_subpara2 = 0;
		private int m_target_subtype = 0;
		private int m_target_type = 0;
		private int m_task_commitlv = 0;
		private int m_task_commitnpc = 0;
		private int m_task_committype = 0;
		private string m_task_content = String.Empty;
		private string m_task_name = String.Empty;
		private string m_task_panel_show = String.Empty;
		private int m_task_reward_exp = 0;
		private int m_task_reward_goldnum = 0;
		private int m_task_reward_goldtype = 0;
		private int m_task_type = 0;
		private int m_titleshow = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Task> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Task>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int addanger { get { return m_addanger; } }
		public int addbuf { get { return m_addbuf; } }
		public int auto_commit { get { return m_auto_commit; } }
		public int auto_findpath { get { return m_auto_findpath; } }
		public string commit_speech { get { return m_commit_speech; } }
		public string cutscene { get { return m_cutscene; } }
		public int dailytask_group { get { return m_dailytask_group; } }
		public int finish_vfx { get { return m_finish_vfx; } }
		public int front_id { get { return m_front_id; } }
		public int guideParm { get { return m_guideParm; } }
		public int ifshowguide { get { return m_ifshowguide; } }
		public int iftop { get { return m_iftop; } }
		public int maps { get { return m_maps; } }
		public int needSave { get { return m_needSave; } }
		public int percentage { get { return m_percentage; } }
		public int playpoint1 { get { return m_playpoint1; } }
		public int playpoint2 { get { return m_playpoint2; } }
		public int playpoint3 { get { return m_playpoint3; } }
		public int preloadmap { get { return m_preloadmap; } }
		public int rate_advance { get { return m_rate_advance; } }
		public int show_type1 { get { return m_show_type1; } }
		public int show_type2 { get { return m_show_type2; } }
		public int showlevel { get { return m_showlevel; } }
		public int soul_id { get { return m_soul_id; } }
		public int target_openboard { get { return m_target_openboard; } }
		public int target_openboard_sub { get { return m_target_openboard_sub; } }
		public int target_subpara1 { get { return m_target_subpara1; } }
		public int target_subpara2 { get { return m_target_subpara2; } }
		public int target_subtype { get { return m_target_subtype; } }
		public int target_type { get { return m_target_type; } }
		public int task_commitlv { get { return m_task_commitlv; } }
		public int task_commitnpc { get { return m_task_commitnpc; } }
		public int task_committype { get { return m_task_committype; } }
		public string task_content { get { return m_task_content; } }
		public string task_name { get { return m_task_name; } }
		public string task_panel_show { get { return m_task_panel_show; } }
		public int task_reward_exp { get { return m_task_reward_exp; } }
		public int task_reward_goldnum { get { return m_task_reward_goldnum; } }
		public int task_reward_goldtype { get { return m_task_reward_goldtype; } }
		public int task_type { get { return m_task_type; } }
		public int titleshow { get { return m_titleshow; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Task __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Task() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Task ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Task> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Task ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Task();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_addanger = __mask[ 0 ] ? q.GetInt( DBCache.FID_addanger, 8 ) : __default.m_addanger;
				temp.m_addbuf = __mask[ 1 ] ? q.GetInt( DBCache.FID_addbuf, 6 ) : __default.m_addbuf;
				temp.m_auto_commit = __mask[ 2 ] ? q.GetInt( DBCache.FID_auto_commit, 11 ) : __default.m_auto_commit;
				temp.m_auto_findpath = __mask[ 3 ] ? q.GetInt( DBCache.FID_auto_findpath, 13 ) : __default.m_auto_findpath;
				temp.m_commit_speech = __mask[ 4 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_commit_speech, 13 ) : __default.m_commit_speech;
				temp.m_cutscene = __mask[ 5 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_cutscene, 8 ) : __default.m_cutscene;
				temp.m_dailytask_group = __mask[ 6 ] ? q.GetInt( DBCache.FID_dailytask_group, 15 ) : __default.m_dailytask_group;
				temp.m_finish_vfx = __mask[ 7 ] ? q.GetInt( DBCache.FID_finish_vfx, 10 ) : __default.m_finish_vfx;
				temp.m_front_id = __mask[ 8 ] ? q.GetInt( DBCache.FID_front_id, 8 ) : __default.m_front_id;
				temp.m_guideParm = __mask[ 9 ] ? q.GetInt( DBCache.FID_guideParm, 9 ) : __default.m_guideParm;
				temp.m_ifshowguide = __mask[ 11 ] ? q.GetInt( DBCache.FID_ifshowguide, 11 ) : __default.m_ifshowguide;
				temp.m_iftop = __mask[ 12 ] ? q.GetInt( DBCache.FID_iftop, 5 ) : __default.m_iftop;
				temp.m_maps = __mask[ 13 ] ? q.GetInt( DBCache.FID_maps, 4 ) : __default.m_maps;
				temp.m_needSave = __mask[ 15 ] ? q.GetInt( DBCache.FID_needSave, 8 ) : __default.m_needSave;
				temp.m_percentage = __mask[ 17 ] ? q.GetInt( DBCache.FID_percentage, 10 ) : __default.m_percentage;
				temp.m_playpoint1 = __mask[ 18 ] ? q.GetInt( DBCache.FID_playpoint1, 10 ) : __default.m_playpoint1;
				temp.m_playpoint2 = __mask[ 19 ] ? q.GetInt( DBCache.FID_playpoint2, 10 ) : __default.m_playpoint2;
				temp.m_playpoint3 = __mask[ 20 ] ? q.GetInt( DBCache.FID_playpoint3, 10 ) : __default.m_playpoint3;
				temp.m_preloadmap = __mask[ 21 ] ? q.GetInt( DBCache.FID_preloadmap, 10 ) : __default.m_preloadmap;
				temp.m_rate_advance = __mask[ 22 ] ? q.GetInt( DBCache.FID_rate_advance, 12 ) : __default.m_rate_advance;
				temp.m_show_type1 = __mask[ 23 ] ? q.GetInt( DBCache.FID_show_type1, 10 ) : __default.m_show_type1;
				temp.m_show_type2 = __mask[ 24 ] ? q.GetInt( DBCache.FID_show_type2, 10 ) : __default.m_show_type2;
				temp.m_showlevel = __mask[ 26 ] ? q.GetInt( DBCache.FID_showlevel, 9 ) : __default.m_showlevel;
				temp.m_soul_id = __mask[ 27 ] ? q.GetInt( DBCache.FID_soul_id, 7 ) : __default.m_soul_id;
				temp.m_target_openboard = __mask[ 33 ] ? q.GetInt( DBCache.FID_target_openboard, 16 ) : __default.m_target_openboard;
				temp.m_target_openboard_sub = __mask[ 34 ] ? q.GetInt( DBCache.FID_target_openboard_sub, 20 ) : __default.m_target_openboard_sub;
				temp.m_target_subpara1 = __mask[ 35 ] ? q.GetInt( DBCache.FID_target_subpara1, 15 ) : __default.m_target_subpara1;
				temp.m_target_subpara2 = __mask[ 36 ] ? q.GetInt( DBCache.FID_target_subpara2, 15 ) : __default.m_target_subpara2;
				temp.m_target_subtype = __mask[ 37 ] ? q.GetInt( DBCache.FID_target_subtype, 14 ) : __default.m_target_subtype;
				temp.m_target_type = __mask[ 38 ] ? q.GetInt( DBCache.FID_target_type, 11 ) : __default.m_target_type;
				temp.m_task_commitlv = __mask[ 39 ] ? q.GetInt( DBCache.FID_task_commitlv, 13 ) : __default.m_task_commitlv;
				temp.m_task_commitnpc = __mask[ 40 ] ? q.GetInt( DBCache.FID_task_commitnpc, 14 ) : __default.m_task_commitnpc;
				temp.m_task_committype = __mask[ 41 ] ? q.GetInt( DBCache.FID_task_committype, 15 ) : __default.m_task_committype;
				temp.m_task_content = __mask[ 42 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_task_content, 12 ) : __default.m_task_content;
				temp.m_task_name = __mask[ 43 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_task_name, 9 ) : __default.m_task_name;
				temp.m_task_panel_show = __mask[ 44 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_task_panel_show, 15 ) : __default.m_task_panel_show;
				temp.m_task_reward_exp = __mask[ 45 ] ? q.GetInt( DBCache.FID_task_reward_exp, 15 ) : __default.m_task_reward_exp;
				temp.m_task_reward_goldnum = __mask[ 46 ] ? q.GetInt( DBCache.FID_task_reward_goldnum, 19 ) : __default.m_task_reward_goldnum;
				temp.m_task_reward_goldtype = __mask[ 47 ] ? q.GetInt( DBCache.FID_task_reward_goldtype, 20 ) : __default.m_task_reward_goldtype;
				temp.m_task_type = __mask[ 49 ] ? q.GetInt( DBCache.FID_task_type, 9 ) : __default.m_task_type;
				temp.m_titleshow = __mask[ 50 ] ? q.GetInt( DBCache.FID_titleshow, 9 ) : __default.m_titleshow;
				TaskEx.IsValid_guidetype = __mask[ 10 ];
				TaskEx.IsValid_movetoNPC = __mask[ 14 ];
				TaskEx.IsValid_next_id = __mask[ 16 ];
				TaskEx.IsValid_showItem = __mask[ 25 ];
				TaskEx.IsValid_target_collect = __mask[ 28 ];
				TaskEx.IsValid_target_finishcopy = __mask[ 29 ];
				TaskEx.IsValid_target_kill = __mask[ 30 ];
				TaskEx.IsValid_target_killget = __mask[ 31 ];
				TaskEx.IsValid_target_minicopy = __mask[ 32 ];
				TaskEx.IsValid_task_reward_item = __mask[ 48 ];
				if ( TaskEx.onLoadComplexField_guidetype != null ) {
					TaskEx.onLoadComplexField_guidetype( temp, q );
				}
				if ( TaskEx.onLoadComplexField_movetoNPC != null ) {
					TaskEx.onLoadComplexField_movetoNPC( temp, q );
				}
				if ( TaskEx.onLoadComplexField_next_id != null ) {
					TaskEx.onLoadComplexField_next_id( temp, q );
				}
				if ( TaskEx.onLoadComplexField_showItem != null ) {
					TaskEx.onLoadComplexField_showItem( temp, q );
				}
				if ( TaskEx.onLoadComplexField_target_collect != null ) {
					TaskEx.onLoadComplexField_target_collect( temp, q );
				}
				if ( TaskEx.onLoadComplexField_target_finishcopy != null ) {
					TaskEx.onLoadComplexField_target_finishcopy( temp, q );
				}
				if ( TaskEx.onLoadComplexField_target_kill != null ) {
					TaskEx.onLoadComplexField_target_kill( temp, q );
				}
				if ( TaskEx.onLoadComplexField_target_killget != null ) {
					TaskEx.onLoadComplexField_target_killget( temp, q );
				}
				if ( TaskEx.onLoadComplexField_target_minicopy != null ) {
					TaskEx.onLoadComplexField_target_minicopy( temp, q );
				}
				if ( TaskEx.onLoadComplexField_task_reward_item != null ) {
					TaskEx.onLoadComplexField_task_reward_item( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Task Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Task ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x0ec30ca7;
		#endregion
	}

	public partial class TaskEx {
		public delegate void LoadComplexField( Task data, LuaDatabase.Query q );
		internal static bool IsValid_guidetype = true;
		static LoadComplexField OnLoadComplexField_guidetype = null;
		public static LoadComplexField onLoadComplexField_guidetype {
			get {
				return OnLoadComplexField_guidetype;
			}
		}
		internal static bool IsValid_movetoNPC = true;
		static LoadComplexField OnLoadComplexField_movetoNPC = null;
		public static LoadComplexField onLoadComplexField_movetoNPC {
			get {
				return OnLoadComplexField_movetoNPC;
			}
		}
		internal static bool IsValid_next_id = true;
		static LoadComplexField OnLoadComplexField_next_id = null;
		public static LoadComplexField onLoadComplexField_next_id {
			get {
				return OnLoadComplexField_next_id;
			}
		}
		internal static bool IsValid_showItem = true;
		static LoadComplexField OnLoadComplexField_showItem = null;
		public static LoadComplexField onLoadComplexField_showItem {
			get {
				return OnLoadComplexField_showItem;
			}
		}
		internal static bool IsValid_target_collect = true;
		static LoadComplexField OnLoadComplexField_target_collect = null;
		public static LoadComplexField onLoadComplexField_target_collect {
			get {
				return OnLoadComplexField_target_collect;
			}
		}
		internal static bool IsValid_target_finishcopy = true;
		static LoadComplexField OnLoadComplexField_target_finishcopy = null;
		public static LoadComplexField onLoadComplexField_target_finishcopy {
			get {
				return OnLoadComplexField_target_finishcopy;
			}
		}
		internal static bool IsValid_target_kill = true;
		static LoadComplexField OnLoadComplexField_target_kill = null;
		public static LoadComplexField onLoadComplexField_target_kill {
			get {
				return OnLoadComplexField_target_kill;
			}
		}
		internal static bool IsValid_target_killget = true;
		static LoadComplexField OnLoadComplexField_target_killget = null;
		public static LoadComplexField onLoadComplexField_target_killget {
			get {
				return OnLoadComplexField_target_killget;
			}
		}
		internal static bool IsValid_target_minicopy = true;
		static LoadComplexField OnLoadComplexField_target_minicopy = null;
		public static LoadComplexField onLoadComplexField_target_minicopy {
			get {
				return OnLoadComplexField_target_minicopy;
			}
		}
		internal static bool IsValid_task_reward_item = true;
		static LoadComplexField OnLoadComplexField_task_reward_item = null;
		public static LoadComplexField onLoadComplexField_task_reward_item {
			get {
				return OnLoadComplexField_task_reward_item;
			}
		}
	}
}
//EOF
