//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Daily {
		const string DBName = "daily";
		#region members
		private int m_id = 0;
		private int m_active_type = 0;
		private int m_CrossEnterTime = 0;
		private int m_CrossEntertype = 0;
		private int m_CrossSeverTime = 0;
		private int m_daily_grop = 0;
		private int m_daily_guildlv = 0;
		private int m_daily_icon = 0;
		private int m_daily_lv = 0;
		private string m_daily_name = String.Empty;
		private int m_daily_order = 0;
		private int m_daily_point = 0;
		private int m_daily_pointCounts = 0;
		private int m_daily_show = 0;
		private string m_daily_text1 = String.Empty;
		private string m_daily_text2 = String.Empty;
		private string m_daily_text3 = String.Empty;
		private int m_daily_type = 0;
		private int m_delayDays = 0;
		private int m_enter_notice = 0;
		private int m_groupNum = 0;
		private int m_if_reenter = 0;
		private int m_if_sign = 0;
		private int m_if_single = 0;
		private int m_isCrossSever = 0;
		private int m_isGroup = 0;
		private int m_isopen = 0;
		private string m_isstandard = String.Empty;
		private int m_MapId = 0;
		private int m_Npc_Id = 0;
		private int m_PanelType = 0;
		private int m_play_times = 0;
		private int m_severcontrol = 0;
		private string m_showItemtips = String.Empty;
		private int m_sweep = 0;
		private int m_ui_show = 0;
		private int m_ui_show_countdown = 0;
		private int m_weekly_day = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Daily> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Daily>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int active_type { get { return m_active_type; } }
		public int CrossEnterTime { get { return m_CrossEnterTime; } }
		public int CrossEntertype { get { return m_CrossEntertype; } }
		public int CrossSeverTime { get { return m_CrossSeverTime; } }
		public int daily_grop { get { return m_daily_grop; } }
		public int daily_guildlv { get { return m_daily_guildlv; } }
		public int daily_icon { get { return m_daily_icon; } }
		public int daily_lv { get { return m_daily_lv; } }
		public string daily_name { get { return m_daily_name; } }
		public int daily_order { get { return m_daily_order; } }
		public int daily_point { get { return m_daily_point; } }
		public int daily_pointCounts { get { return m_daily_pointCounts; } }
		public int daily_show { get { return m_daily_show; } }
		public string daily_text1 { get { return m_daily_text1; } }
		public string daily_text2 { get { return m_daily_text2; } }
		public string daily_text3 { get { return m_daily_text3; } }
		public int daily_type { get { return m_daily_type; } }
		public int delayDays { get { return m_delayDays; } }
		public int enter_notice { get { return m_enter_notice; } }
		public int groupNum { get { return m_groupNum; } }
		public int if_reenter { get { return m_if_reenter; } }
		public int if_sign { get { return m_if_sign; } }
		public int if_single { get { return m_if_single; } }
		public int isCrossSever { get { return m_isCrossSever; } }
		public int isGroup { get { return m_isGroup; } }
		public int isopen { get { return m_isopen; } }
		public string isstandard { get { return m_isstandard; } }
		public int MapId { get { return m_MapId; } }
		public int Npc_Id { get { return m_Npc_Id; } }
		public int PanelType { get { return m_PanelType; } }
		public int play_times { get { return m_play_times; } }
		public int severcontrol { get { return m_severcontrol; } }
		public string showItemtips { get { return m_showItemtips; } }
		public int sweep { get { return m_sweep; } }
		public int ui_show { get { return m_ui_show; } }
		public int ui_show_countdown { get { return m_ui_show_countdown; } }
		public int weekly_day { get { return m_weekly_day; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Daily __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Daily() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Daily ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Daily> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Daily ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Daily();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_active_type = __mask[ 0 ] ? q.GetInt( DBCache.FID_active_type, 11 ) : __default.m_active_type;
				temp.m_CrossEnterTime = __mask[ 2 ] ? q.GetInt( DBCache.FID_CrossEnterTime, 14 ) : __default.m_CrossEnterTime;
				temp.m_CrossEntertype = __mask[ 3 ] ? q.GetInt( DBCache.FID_CrossEntertype, 14 ) : __default.m_CrossEntertype;
				temp.m_CrossSeverTime = __mask[ 4 ] ? q.GetInt( DBCache.FID_CrossSeverTime, 14 ) : __default.m_CrossSeverTime;
				temp.m_daily_grop = __mask[ 5 ] ? q.GetInt( DBCache.FID_daily_grop, 10 ) : __default.m_daily_grop;
				temp.m_daily_guildlv = __mask[ 6 ] ? q.GetInt( DBCache.FID_daily_guildlv, 13 ) : __default.m_daily_guildlv;
				temp.m_daily_icon = __mask[ 7 ] ? q.GetInt( DBCache.FID_daily_icon, 10 ) : __default.m_daily_icon;
				temp.m_daily_lv = __mask[ 8 ] ? q.GetInt( DBCache.FID_daily_lv, 8 ) : __default.m_daily_lv;
				temp.m_daily_name = __mask[ 9 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_daily_name, 10 ) : __default.m_daily_name;
				temp.m_daily_order = __mask[ 10 ] ? q.GetInt( DBCache.FID_daily_order, 11 ) : __default.m_daily_order;
				temp.m_daily_point = __mask[ 11 ] ? q.GetInt( DBCache.FID_daily_point, 11 ) : __default.m_daily_point;
				temp.m_daily_pointCounts = __mask[ 12 ] ? q.GetInt( DBCache.FID_daily_pointCounts, 17 ) : __default.m_daily_pointCounts;
				temp.m_daily_show = __mask[ 13 ] ? q.GetInt( DBCache.FID_daily_show, 10 ) : __default.m_daily_show;
				temp.m_daily_text1 = __mask[ 14 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_daily_text1, 11 ) : __default.m_daily_text1;
				temp.m_daily_text2 = __mask[ 15 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_daily_text2, 11 ) : __default.m_daily_text2;
				temp.m_daily_text3 = __mask[ 16 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_daily_text3, 11 ) : __default.m_daily_text3;
				temp.m_daily_type = __mask[ 18 ] ? q.GetInt( DBCache.FID_daily_type, 10 ) : __default.m_daily_type;
				temp.m_delayDays = __mask[ 19 ] ? q.GetInt( DBCache.FID_delayDays, 9 ) : __default.m_delayDays;
				temp.m_enter_notice = __mask[ 20 ] ? q.GetInt( DBCache.FID_enter_notice, 12 ) : __default.m_enter_notice;
				temp.m_groupNum = __mask[ 21 ] ? q.GetInt( DBCache.FID_groupNum, 8 ) : __default.m_groupNum;
				temp.m_if_reenter = __mask[ 22 ] ? q.GetInt( DBCache.FID_if_reenter, 10 ) : __default.m_if_reenter;
				temp.m_if_sign = __mask[ 23 ] ? q.GetInt( DBCache.FID_if_sign, 7 ) : __default.m_if_sign;
				temp.m_if_single = __mask[ 24 ] ? q.GetInt( DBCache.FID_if_single, 9 ) : __default.m_if_single;
				temp.m_isCrossSever = __mask[ 25 ] ? q.GetInt( DBCache.FID_isCrossSever, 12 ) : __default.m_isCrossSever;
				temp.m_isGroup = __mask[ 26 ] ? q.GetInt( DBCache.FID_isGroup, 7 ) : __default.m_isGroup;
				temp.m_isopen = __mask[ 27 ] ? q.GetInt( DBCache.FID_isopen, 6 ) : __default.m_isopen;
				temp.m_isstandard = __mask[ 28 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_isstandard, 10 ) : __default.m_isstandard;
				temp.m_MapId = __mask[ 34 ] ? q.GetInt( DBCache.FID_MapId, 5 ) : __default.m_MapId;
				temp.m_Npc_Id = __mask[ 35 ] ? q.GetInt( DBCache.FID_Npc_Id, 6 ) : __default.m_Npc_Id;
				temp.m_PanelType = __mask[ 36 ] ? q.GetInt( DBCache.FID_PanelType, 9 ) : __default.m_PanelType;
				temp.m_play_times = __mask[ 37 ] ? q.GetInt( DBCache.FID_play_times, 10 ) : __default.m_play_times;
				temp.m_severcontrol = __mask[ 38 ] ? q.GetInt( DBCache.FID_severcontrol, 12 ) : __default.m_severcontrol;
				temp.m_showItemtips = __mask[ 39 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_showItemtips, 12 ) : __default.m_showItemtips;
				temp.m_sweep = __mask[ 40 ] ? q.GetInt( DBCache.FID_sweep, 5 ) : __default.m_sweep;
				temp.m_ui_show = __mask[ 41 ] ? q.GetInt( DBCache.FID_ui_show, 7 ) : __default.m_ui_show;
				temp.m_ui_show_countdown = __mask[ 42 ] ? q.GetInt( DBCache.FID_ui_show_countdown, 17 ) : __default.m_ui_show_countdown;
				temp.m_weekly_day = __mask[ 43 ] ? q.GetInt( DBCache.FID_weekly_day, 10 ) : __default.m_weekly_day;
				DailyEx.IsValid_Convenient_team = __mask[ 1 ];
				DailyEx.IsValid_daily_time = __mask[ 17 ];
				DailyEx.IsValid_itemshow1 = __mask[ 29 ];
				DailyEx.IsValid_itemshow2 = __mask[ 30 ];
				DailyEx.IsValid_itemshow3 = __mask[ 31 ];
				DailyEx.IsValid_itemshow4 = __mask[ 32 ];
				DailyEx.IsValid_itemshow5 = __mask[ 33 ];
				if ( DailyEx.onLoadComplexField_Convenient_team != null ) {
					DailyEx.onLoadComplexField_Convenient_team( temp, q );
				}
				if ( DailyEx.onLoadComplexField_daily_time != null ) {
					DailyEx.onLoadComplexField_daily_time( temp, q );
				}
				if ( DailyEx.onLoadComplexField_itemshow1 != null ) {
					DailyEx.onLoadComplexField_itemshow1( temp, q );
				}
				if ( DailyEx.onLoadComplexField_itemshow2 != null ) {
					DailyEx.onLoadComplexField_itemshow2( temp, q );
				}
				if ( DailyEx.onLoadComplexField_itemshow3 != null ) {
					DailyEx.onLoadComplexField_itemshow3( temp, q );
				}
				if ( DailyEx.onLoadComplexField_itemshow4 != null ) {
					DailyEx.onLoadComplexField_itemshow4( temp, q );
				}
				if ( DailyEx.onLoadComplexField_itemshow5 != null ) {
					DailyEx.onLoadComplexField_itemshow5( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Daily Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Daily ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x3b30d98c;
		#endregion
	}

	public partial class DailyEx {
		public delegate void LoadComplexField( Daily data, LuaDatabase.Query q );
		internal static bool IsValid_Convenient_team = true;
		static LoadComplexField OnLoadComplexField_Convenient_team = null;
		public static LoadComplexField onLoadComplexField_Convenient_team {
			get {
				return OnLoadComplexField_Convenient_team;
			}
		}
		internal static bool IsValid_daily_time = true;
		static LoadComplexField OnLoadComplexField_daily_time = null;
		public static LoadComplexField onLoadComplexField_daily_time {
			get {
				return OnLoadComplexField_daily_time;
			}
		}
		internal static bool IsValid_itemshow1 = true;
		static LoadComplexField OnLoadComplexField_itemshow1 = null;
		public static LoadComplexField onLoadComplexField_itemshow1 {
			get {
				return OnLoadComplexField_itemshow1;
			}
		}
		internal static bool IsValid_itemshow2 = true;
		static LoadComplexField OnLoadComplexField_itemshow2 = null;
		public static LoadComplexField onLoadComplexField_itemshow2 {
			get {
				return OnLoadComplexField_itemshow2;
			}
		}
		internal static bool IsValid_itemshow3 = true;
		static LoadComplexField OnLoadComplexField_itemshow3 = null;
		public static LoadComplexField onLoadComplexField_itemshow3 {
			get {
				return OnLoadComplexField_itemshow3;
			}
		}
		internal static bool IsValid_itemshow4 = true;
		static LoadComplexField OnLoadComplexField_itemshow4 = null;
		public static LoadComplexField onLoadComplexField_itemshow4 {
			get {
				return OnLoadComplexField_itemshow4;
			}
		}
		internal static bool IsValid_itemshow5 = true;
		static LoadComplexField OnLoadComplexField_itemshow5 = null;
		public static LoadComplexField onLoadComplexField_itemshow5 {
			get {
				return OnLoadComplexField_itemshow5;
			}
		}
	}
}
//EOF
