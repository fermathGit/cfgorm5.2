//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Item {
		const string DBName = "item";
		#region members
		private int m_id = 0;
		private int m_baozhu = 0;
		private int m_cdGroup = 0;
		private int m_cdTime = 0;
		private int m_dailyCount = 0;
		private int m_dailyCountGroup = 0;
		private string m_desc = String.Empty;
		private int m_detailedType = 0;
		private int m_iconCarrier = 0;
		private int m_iconRoute = 0;
		private int m_itemType = 0;
		private int m_level = 0;
		private int m_maxAmount = 0;
		private string m_name = String.Empty;
		private int m_needBrodcast = 0;
		private int m_needSaveLog = 0;
		private int m_notUserCareer = 0;
		private int m_operate = 0;
		private int m_price = 0;
		private int m_pricetype = 0;
		private string m_product = String.Empty;
		private int m_quality = 0;
		private int m_Selljudge = 0;
		private string m_showname = String.Empty;
		private int m_sortIndex = 0;
		private int m_usefulLife = 0;
		private int m_useMaxCount = 0;
		private int m_usename = 0;
		private int m_useParam1 = 0;
		private int m_useParam2 = 0;
		private int m_useParam3 = 0;
		private int m_useParam4 = 0;
		private int m_useParam5 = 0;
		private string m_usesound = String.Empty;
		private int m_UseStraightway = 0;
		private string m_usetxt = String.Empty;
		private int m_useType = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Item> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Item>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int baozhu { get { return m_baozhu; } }
		public int cdGroup { get { return m_cdGroup; } }
		public int cdTime { get { return m_cdTime; } }
		public int dailyCount { get { return m_dailyCount; } }
		public int dailyCountGroup { get { return m_dailyCountGroup; } }
		public string desc { get { return m_desc; } }
		public int detailedType { get { return m_detailedType; } }
		public int iconCarrier { get { return m_iconCarrier; } }
		public int iconRoute { get { return m_iconRoute; } }
		public int itemType { get { return m_itemType; } }
		public int level { get { return m_level; } }
		public int maxAmount { get { return m_maxAmount; } }
		public string name { get { return m_name; } }
		public int needBrodcast { get { return m_needBrodcast; } }
		public int needSaveLog { get { return m_needSaveLog; } }
		public int notUserCareer { get { return m_notUserCareer; } }
		public int operate { get { return m_operate; } }
		public int price { get { return m_price; } }
		public int pricetype { get { return m_pricetype; } }
		public string product { get { return m_product; } }
		public int quality { get { return m_quality; } }
		public int Selljudge { get { return m_Selljudge; } }
		public string showname { get { return m_showname; } }
		public int sortIndex { get { return m_sortIndex; } }
		public int usefulLife { get { return m_usefulLife; } }
		public int useMaxCount { get { return m_useMaxCount; } }
		public int usename { get { return m_usename; } }
		public int useParam1 { get { return m_useParam1; } }
		public int useParam2 { get { return m_useParam2; } }
		public int useParam3 { get { return m_useParam3; } }
		public int useParam4 { get { return m_useParam4; } }
		public int useParam5 { get { return m_useParam5; } }
		public string usesound { get { return m_usesound; } }
		public int UseStraightway { get { return m_UseStraightway; } }
		public string usetxt { get { return m_usetxt; } }
		public int useType { get { return m_useType; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Item __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Item() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Item ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Item> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Item ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Item();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_baozhu = __mask[ 0 ] ? q.GetInt( DBCache.FID_baozhu, 6 ) : __default.m_baozhu;
				temp.m_cdGroup = __mask[ 1 ] ? q.GetInt( DBCache.FID_cdGroup, 7 ) : __default.m_cdGroup;
				temp.m_cdTime = __mask[ 2 ] ? q.GetInt( DBCache.FID_cdTime, 6 ) : __default.m_cdTime;
				temp.m_dailyCount = __mask[ 3 ] ? q.GetInt( DBCache.FID_dailyCount, 10 ) : __default.m_dailyCount;
				temp.m_dailyCountGroup = __mask[ 4 ] ? q.GetInt( DBCache.FID_dailyCountGroup, 15 ) : __default.m_dailyCountGroup;
				temp.m_desc = __mask[ 5 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc, 4 ) : __default.m_desc;
				temp.m_detailedType = __mask[ 6 ] ? q.GetInt( DBCache.FID_detailedType, 12 ) : __default.m_detailedType;
				temp.m_iconCarrier = __mask[ 7 ] ? q.GetInt( DBCache.FID_iconCarrier, 11 ) : __default.m_iconCarrier;
				temp.m_iconRoute = __mask[ 9 ] ? q.GetInt( DBCache.FID_iconRoute, 9 ) : __default.m_iconRoute;
				temp.m_itemType = __mask[ 10 ] ? q.GetInt( DBCache.FID_itemType, 8 ) : __default.m_itemType;
				temp.m_level = __mask[ 11 ] ? q.GetInt( DBCache.FID_level, 5 ) : __default.m_level;
				temp.m_maxAmount = __mask[ 12 ] ? q.GetInt( DBCache.FID_maxAmount, 9 ) : __default.m_maxAmount;
				temp.m_name = __mask[ 13 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_name, 4 ) : __default.m_name;
				temp.m_needBrodcast = __mask[ 14 ] ? q.GetInt( DBCache.FID_needBrodcast, 12 ) : __default.m_needBrodcast;
				temp.m_needSaveLog = __mask[ 15 ] ? q.GetInt( DBCache.FID_needSaveLog, 11 ) : __default.m_needSaveLog;
				temp.m_notUserCareer = __mask[ 16 ] ? q.GetInt( DBCache.FID_notUserCareer, 13 ) : __default.m_notUserCareer;
				temp.m_operate = __mask[ 17 ] ? q.GetInt( DBCache.FID_operate, 7 ) : __default.m_operate;
				temp.m_price = __mask[ 18 ] ? q.GetInt( DBCache.FID_price, 5 ) : __default.m_price;
				temp.m_pricetype = __mask[ 19 ] ? q.GetInt( DBCache.FID_pricetype, 9 ) : __default.m_pricetype;
				temp.m_product = __mask[ 20 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_product, 7 ) : __default.m_product;
				temp.m_quality = __mask[ 22 ] ? q.GetInt( DBCache.FID_quality, 7 ) : __default.m_quality;
				temp.m_Selljudge = __mask[ 24 ] ? q.GetInt( DBCache.FID_Selljudge, 9 ) : __default.m_Selljudge;
				temp.m_showname = __mask[ 25 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_showname, 8 ) : __default.m_showname;
				temp.m_sortIndex = __mask[ 26 ] ? q.GetInt( DBCache.FID_sortIndex, 9 ) : __default.m_sortIndex;
				temp.m_usefulLife = __mask[ 28 ] ? q.GetInt( DBCache.FID_usefulLife, 10 ) : __default.m_usefulLife;
				temp.m_useMaxCount = __mask[ 30 ] ? q.GetInt( DBCache.FID_useMaxCount, 11 ) : __default.m_useMaxCount;
				temp.m_usename = __mask[ 31 ] ? q.GetInt( DBCache.FID_usename, 7 ) : __default.m_usename;
				temp.m_useParam1 = __mask[ 34 ] ? q.GetInt( DBCache.FID_useParam1, 9 ) : __default.m_useParam1;
				temp.m_useParam2 = __mask[ 35 ] ? q.GetInt( DBCache.FID_useParam2, 9 ) : __default.m_useParam2;
				temp.m_useParam3 = __mask[ 36 ] ? q.GetInt( DBCache.FID_useParam3, 9 ) : __default.m_useParam3;
				temp.m_useParam4 = __mask[ 37 ] ? q.GetInt( DBCache.FID_useParam4, 9 ) : __default.m_useParam4;
				temp.m_useParam5 = __mask[ 38 ] ? q.GetInt( DBCache.FID_useParam5, 9 ) : __default.m_useParam5;
				temp.m_usesound = __mask[ 39 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_usesound, 8 ) : __default.m_usesound;
				temp.m_UseStraightway = __mask[ 40 ] ? q.GetInt( DBCache.FID_UseStraightway, 14 ) : __default.m_UseStraightway;
				temp.m_usetxt = __mask[ 41 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_usetxt, 6 ) : __default.m_usetxt;
				temp.m_useType = __mask[ 42 ] ? q.GetInt( DBCache.FID_useType, 7 ) : __default.m_useType;
				ItemEx.IsValid_iconPath = __mask[ 8 ];
				ItemEx.IsValid_propParam = __mask[ 21 ];
				ItemEx.IsValid_Relation_UI = __mask[ 23 ];
				ItemEx.IsValid_toequip = __mask[ 27 ];
				ItemEx.IsValid_UseJumpPage = __mask[ 29 ];
				ItemEx.IsValid_useNeeditem = __mask[ 32 ];
				ItemEx.IsValid_useNeedmoney = __mask[ 33 ];
				if ( ItemEx.onLoadComplexField_iconPath != null ) {
					ItemEx.onLoadComplexField_iconPath( temp, q );
				}
				if ( ItemEx.onLoadComplexField_propParam != null ) {
					ItemEx.onLoadComplexField_propParam( temp, q );
				}
				if ( ItemEx.onLoadComplexField_Relation_UI != null ) {
					ItemEx.onLoadComplexField_Relation_UI( temp, q );
				}
				if ( ItemEx.onLoadComplexField_toequip != null ) {
					ItemEx.onLoadComplexField_toequip( temp, q );
				}
				if ( ItemEx.onLoadComplexField_UseJumpPage != null ) {
					ItemEx.onLoadComplexField_UseJumpPage( temp, q );
				}
				if ( ItemEx.onLoadComplexField_useNeeditem != null ) {
					ItemEx.onLoadComplexField_useNeeditem( temp, q );
				}
				if ( ItemEx.onLoadComplexField_useNeedmoney != null ) {
					ItemEx.onLoadComplexField_useNeedmoney( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Item Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Item ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x42811105;
		#endregion
	}

	public partial class ItemEx {
		public delegate void LoadComplexField( Item data, LuaDatabase.Query q );
		internal static bool IsValid_iconPath = true;
		static LoadComplexField OnLoadComplexField_iconPath = null;
		public static LoadComplexField onLoadComplexField_iconPath {
			get {
				return OnLoadComplexField_iconPath;
			}
		}
		internal static bool IsValid_propParam = true;
		static LoadComplexField OnLoadComplexField_propParam = null;
		public static LoadComplexField onLoadComplexField_propParam {
			get {
				return OnLoadComplexField_propParam;
			}
		}
		internal static bool IsValid_Relation_UI = true;
		static LoadComplexField OnLoadComplexField_Relation_UI = null;
		public static LoadComplexField onLoadComplexField_Relation_UI {
			get {
				return OnLoadComplexField_Relation_UI;
			}
		}
		internal static bool IsValid_toequip = true;
		static LoadComplexField OnLoadComplexField_toequip = null;
		public static LoadComplexField onLoadComplexField_toequip {
			get {
				return OnLoadComplexField_toequip;
			}
		}
		internal static bool IsValid_UseJumpPage = true;
		static LoadComplexField OnLoadComplexField_UseJumpPage = null;
		public static LoadComplexField onLoadComplexField_UseJumpPage {
			get {
				return OnLoadComplexField_UseJumpPage;
			}
		}
		internal static bool IsValid_useNeeditem = true;
		static LoadComplexField OnLoadComplexField_useNeeditem = null;
		public static LoadComplexField onLoadComplexField_useNeeditem {
			get {
				return OnLoadComplexField_useNeeditem;
			}
		}
		internal static bool IsValid_useNeedmoney = true;
		static LoadComplexField OnLoadComplexField_useNeedmoney = null;
		public static LoadComplexField onLoadComplexField_useNeedmoney {
			get {
				return OnLoadComplexField_useNeedmoney;
			}
		}
	}
}
//EOF
