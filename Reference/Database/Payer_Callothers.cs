//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Payer_Callothers {
		const string DBName = "player_callothers";
		#region members
		private int m_id = 0;
		private int m_camp_forOwnitem = 0;
		private int m_camp_forOwnmoney = 0;
		private int m_camp_forOwnmoneyType = 0;
		private int m_camp_forrOfficeritem = 0;
		private int m_camp_forrOfficermoney = 0;
		private int m_camp_forrOfficermoneyType = 0;
		private int m_guild_forAllitem = 0;
		private int m_guild_forAllmoney = 0;
		private int m_guild_forAllmoneyType = 0;
		private int m_guild_forOwnitem = 0;
		private int m_guild_forOwnmoney = 0;
		private int m_guild_forOwnmoneyType = 0;
		private int m_marital_forAllitem = 0;
		private int m_marital_forAllmoney = 0;
		private int m_marital_forAllmoneyType = 0;
		private int m_mentoring_forAllitem = 0;
		private int m_mentoring_forAllmoney = 0;
		private int m_mentoring_forAllmoneyType = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Payer_Callothers> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Payer_Callothers>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int camp_forOwnitem { get { return m_camp_forOwnitem; } }
		public int camp_forOwnmoney { get { return m_camp_forOwnmoney; } }
		public int camp_forOwnmoneyType { get { return m_camp_forOwnmoneyType; } }
		public int camp_forrOfficeritem { get { return m_camp_forrOfficeritem; } }
		public int camp_forrOfficermoney { get { return m_camp_forrOfficermoney; } }
		public int camp_forrOfficermoneyType { get { return m_camp_forrOfficermoneyType; } }
		public int guild_forAllitem { get { return m_guild_forAllitem; } }
		public int guild_forAllmoney { get { return m_guild_forAllmoney; } }
		public int guild_forAllmoneyType { get { return m_guild_forAllmoneyType; } }
		public int guild_forOwnitem { get { return m_guild_forOwnitem; } }
		public int guild_forOwnmoney { get { return m_guild_forOwnmoney; } }
		public int guild_forOwnmoneyType { get { return m_guild_forOwnmoneyType; } }
		public int marital_forAllitem { get { return m_marital_forAllitem; } }
		public int marital_forAllmoney { get { return m_marital_forAllmoney; } }
		public int marital_forAllmoneyType { get { return m_marital_forAllmoneyType; } }
		public int mentoring_forAllitem { get { return m_mentoring_forAllitem; } }
		public int mentoring_forAllmoney { get { return m_mentoring_forAllmoney; } }
		public int mentoring_forAllmoneyType { get { return m_mentoring_forAllmoneyType; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Payer_Callothers __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Payer_Callothers() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Payer_Callothers ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Payer_Callothers> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Payer_Callothers ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Payer_Callothers();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_camp_forOwnitem = __mask[ 0 ] ? q.GetInt( DBCache.FID_camp_forOwnitem, 15 ) : __default.m_camp_forOwnitem;
				temp.m_camp_forOwnmoney = __mask[ 1 ] ? q.GetInt( DBCache.FID_camp_forOwnmoney, 16 ) : __default.m_camp_forOwnmoney;
				temp.m_camp_forOwnmoneyType = __mask[ 2 ] ? q.GetInt( DBCache.FID_camp_forOwnmoneyType, 20 ) : __default.m_camp_forOwnmoneyType;
				temp.m_camp_forrOfficeritem = __mask[ 3 ] ? q.GetInt( DBCache.FID_camp_forrOfficeritem, 20 ) : __default.m_camp_forrOfficeritem;
				temp.m_camp_forrOfficermoney = __mask[ 4 ] ? q.GetInt( DBCache.FID_camp_forrOfficermoney, 21 ) : __default.m_camp_forrOfficermoney;
				temp.m_camp_forrOfficermoneyType = __mask[ 5 ] ? q.GetInt( DBCache.FID_camp_forrOfficermoneyType, 25 ) : __default.m_camp_forrOfficermoneyType;
				temp.m_guild_forAllitem = __mask[ 6 ] ? q.GetInt( DBCache.FID_guild_forAllitem, 16 ) : __default.m_guild_forAllitem;
				temp.m_guild_forAllmoney = __mask[ 7 ] ? q.GetInt( DBCache.FID_guild_forAllmoney, 17 ) : __default.m_guild_forAllmoney;
				temp.m_guild_forAllmoneyType = __mask[ 8 ] ? q.GetInt( DBCache.FID_guild_forAllmoneyType, 21 ) : __default.m_guild_forAllmoneyType;
				temp.m_guild_forOwnitem = __mask[ 9 ] ? q.GetInt( DBCache.FID_guild_forOwnitem, 16 ) : __default.m_guild_forOwnitem;
				temp.m_guild_forOwnmoney = __mask[ 10 ] ? q.GetInt( DBCache.FID_guild_forOwnmoney, 17 ) : __default.m_guild_forOwnmoney;
				temp.m_guild_forOwnmoneyType = __mask[ 11 ] ? q.GetInt( DBCache.FID_guild_forOwnmoneyType, 21 ) : __default.m_guild_forOwnmoneyType;
				temp.m_marital_forAllitem = __mask[ 12 ] ? q.GetInt( DBCache.FID_marital_forAllitem, 18 ) : __default.m_marital_forAllitem;
				temp.m_marital_forAllmoney = __mask[ 13 ] ? q.GetInt( DBCache.FID_marital_forAllmoney, 19 ) : __default.m_marital_forAllmoney;
				temp.m_marital_forAllmoneyType = __mask[ 14 ] ? q.GetInt( DBCache.FID_marital_forAllmoneyType, 23 ) : __default.m_marital_forAllmoneyType;
				temp.m_mentoring_forAllitem = __mask[ 15 ] ? q.GetInt( DBCache.FID_mentoring_forAllitem, 20 ) : __default.m_mentoring_forAllitem;
				temp.m_mentoring_forAllmoney = __mask[ 16 ] ? q.GetInt( DBCache.FID_mentoring_forAllmoney, 21 ) : __default.m_mentoring_forAllmoney;
				temp.m_mentoring_forAllmoneyType = __mask[ 17 ] ? q.GetInt( DBCache.FID_mentoring_forAllmoneyType, 25 ) : __default.m_mentoring_forAllmoneyType;
				return temp;
			}
			return null;
		}

 		public static Payer_Callothers Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Payer_Callothers ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x7ab9fb31;
		#endregion
	}
}
//EOF
