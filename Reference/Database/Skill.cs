//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Skill {
		const string DBName = "skill";
		#region members
		private int m_id = 0;
		private float m_ActionMove_range = 0;
		private int m_ActionMove_time = 0;
		private int m_ActionMovepoint = 0;
		private string m_ActionSound = String.Empty;
		private int m_Angerneed = 0;
		private int m_Aoe = 0;
		private float m_AoeAngle = 0;
		private int m_Aoeoffset = 0;
		private float m_AoeRange = 0;
		private float m_AttackRange = 0;
		private int m_AttackSfxScale = 0;
		private int m_AttackSfxstate = 0;
		private int m_BeAtkSfxType = 0;
		private string m_BeAtkSound = String.Empty;
		private int m_BeAttackSfxScale = 0;
		private int m_BossAlert = 0;
		private int m_Break_skill = 0;
		private int m_cam_zoom = 0;
		private int m_cast_dark = 0;
		private int m_cast_darkadd = 0;
		private int m_cast_shake = 0;
		private int m_CastDuration = 0;
		private string m_ChargeAction = String.Empty;
		private int m_ChargeLimit = 0;
		private int m_ChargeOffset = 0;
		private string m_ChargeSfx = String.Empty;
		private int m_ChargeSfxScale = 0;
		private string m_ChargeSfxSlots = String.Empty;
		private string m_ChargeSound = String.Empty;
		private int m_ChargeSpeed = 0;
		private int m_ChargeTime = 0;
		private int m_ComboID = 0;
		private int m_DamageType = 0;
		private int m_EffectTimes = 0;
		private int m_Hiden = 0;
		private float m_hit_away = 0;
		private int m_hit_pause = 0;
		private int m_hit_shake = 0;
		private int m_HoldActionType = 0;
		private int m_Lvup_times = 0;
		private int m_MaxEffectCount = 0;
		private int m_MissileSfxScale = 0;
		private string m_MissileSound = String.Empty;
		private int m_NeedActionMove = 0;
		private int m_NeedCharge = 0;
		private int m_play_show1 = 0;
		private int m_PrepareActionType = 0;
		private int m_PrepareSfxScale = 0;
		private string m_PrepareSound = String.Empty;
		private int m_show_skillname = 0;
		private int m_SimboGroup_id = 0;
		private string m_Skill_SimboInfo = String.Empty;
		private int m_Skill_Time = 0;
		private string m_SkillAction = String.Empty;
		private string m_SkillAction_back = String.Empty;
		private string m_SkillAttackSfx = String.Empty;
		private string m_SkillAttackSfxSlots = String.Empty;
		private string m_SkillBeAtkSfx = String.Empty;
		private string m_SkillBeAtkSlots = String.Empty;
		private int m_SkillClass = 0;
		private int m_SkillCoolDown = 0;
		private int m_SkillGroup_Disturb = 0;
		private int m_SkillGroup_id = 0;
		private int m_SkillGroup_next = 0;
		private int m_SkillIcon = 0;
		private string m_SkillInfo = String.Empty;
		private string m_SkillMissileSfx = String.Empty;
		private int m_SkillMissileSfxMode = 0;
		private string m_SkillMissileSfxSlot = String.Empty;
		private int m_SkillMissileSfxType = 0;
		private int m_SkillMissileSpeed = 0;
		private string m_SkillName = String.Empty;
		private string m_SkillPrepareAction = String.Empty;
		private string m_SkillPrepareRangeSfx = String.Empty;
		private string m_SkillPrepareSfx = String.Empty;
		private string m_SkillPrepareSfxSlots = String.Empty;
		private int m_SkillQuality = 0;
		private int m_SkillType = 0;
		private string m_Spellposvfx = String.Empty;
		private int m_TargetSearch = 0;
		private int m_Trigger_param = 0;
		private int m_TriggerTarget = 0;
		private int m_Use_Silence = 0;
		private int m_Use_Spec = 0;
		private float m_wait_time = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Skill> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Skill>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public float ActionMove_range { get { return m_ActionMove_range; } }
		public int ActionMove_time { get { return m_ActionMove_time; } }
		public int ActionMovepoint { get { return m_ActionMovepoint; } }
		public string ActionSound { get { return m_ActionSound; } }
		public int Angerneed { get { return m_Angerneed; } }
		public int Aoe { get { return m_Aoe; } }
		public float AoeAngle { get { return m_AoeAngle; } }
		public int Aoeoffset { get { return m_Aoeoffset; } }
		public float AoeRange { get { return m_AoeRange; } }
		public float AttackRange { get { return m_AttackRange; } }
		public int AttackSfxScale { get { return m_AttackSfxScale; } }
		public int AttackSfxstate { get { return m_AttackSfxstate; } }
		public int BeAtkSfxType { get { return m_BeAtkSfxType; } }
		public string BeAtkSound { get { return m_BeAtkSound; } }
		public int BeAttackSfxScale { get { return m_BeAttackSfxScale; } }
		public int BossAlert { get { return m_BossAlert; } }
		public int Break_skill { get { return m_Break_skill; } }
		public int cam_zoom { get { return m_cam_zoom; } }
		public int cast_dark { get { return m_cast_dark; } }
		public int cast_darkadd { get { return m_cast_darkadd; } }
		public int cast_shake { get { return m_cast_shake; } }
		public int CastDuration { get { return m_CastDuration; } }
		public string ChargeAction { get { return m_ChargeAction; } }
		public int ChargeLimit { get { return m_ChargeLimit; } }
		public int ChargeOffset { get { return m_ChargeOffset; } }
		public string ChargeSfx { get { return m_ChargeSfx; } }
		public int ChargeSfxScale { get { return m_ChargeSfxScale; } }
		public string ChargeSfxSlots { get { return m_ChargeSfxSlots; } }
		public string ChargeSound { get { return m_ChargeSound; } }
		public int ChargeSpeed { get { return m_ChargeSpeed; } }
		public int ChargeTime { get { return m_ChargeTime; } }
		public int ComboID { get { return m_ComboID; } }
		public int DamageType { get { return m_DamageType; } }
		public int EffectTimes { get { return m_EffectTimes; } }
		public int Hiden { get { return m_Hiden; } }
		public float hit_away { get { return m_hit_away; } }
		public int hit_pause { get { return m_hit_pause; } }
		public int hit_shake { get { return m_hit_shake; } }
		public int HoldActionType { get { return m_HoldActionType; } }
		public int Lvup_times { get { return m_Lvup_times; } }
		public int MaxEffectCount { get { return m_MaxEffectCount; } }
		public int MissileSfxScale { get { return m_MissileSfxScale; } }
		public string MissileSound { get { return m_MissileSound; } }
		public int NeedActionMove { get { return m_NeedActionMove; } }
		public int NeedCharge { get { return m_NeedCharge; } }
		public int play_show1 { get { return m_play_show1; } }
		public int PrepareActionType { get { return m_PrepareActionType; } }
		public int PrepareSfxScale { get { return m_PrepareSfxScale; } }
		public string PrepareSound { get { return m_PrepareSound; } }
		public int show_skillname { get { return m_show_skillname; } }
		public int SimboGroup_id { get { return m_SimboGroup_id; } }
		public string Skill_SimboInfo { get { return m_Skill_SimboInfo; } }
		public int Skill_Time { get { return m_Skill_Time; } }
		public string SkillAction { get { return m_SkillAction; } }
		public string SkillAction_back { get { return m_SkillAction_back; } }
		public string SkillAttackSfx { get { return m_SkillAttackSfx; } }
		public string SkillAttackSfxSlots { get { return m_SkillAttackSfxSlots; } }
		public string SkillBeAtkSfx { get { return m_SkillBeAtkSfx; } }
		public string SkillBeAtkSlots { get { return m_SkillBeAtkSlots; } }
		public int SkillClass { get { return m_SkillClass; } }
		public int SkillCoolDown { get { return m_SkillCoolDown; } }
		public int SkillGroup_Disturb { get { return m_SkillGroup_Disturb; } }
		public int SkillGroup_id { get { return m_SkillGroup_id; } }
		public int SkillGroup_next { get { return m_SkillGroup_next; } }
		public int SkillIcon { get { return m_SkillIcon; } }
		public string SkillInfo { get { return m_SkillInfo; } }
		public string SkillMissileSfx { get { return m_SkillMissileSfx; } }
		public int SkillMissileSfxMode { get { return m_SkillMissileSfxMode; } }
		public string SkillMissileSfxSlot { get { return m_SkillMissileSfxSlot; } }
		public int SkillMissileSfxType { get { return m_SkillMissileSfxType; } }
		public int SkillMissileSpeed { get { return m_SkillMissileSpeed; } }
		public string SkillName { get { return m_SkillName; } }
		public string SkillPrepareAction { get { return m_SkillPrepareAction; } }
		public string SkillPrepareRangeSfx { get { return m_SkillPrepareRangeSfx; } }
		public string SkillPrepareSfx { get { return m_SkillPrepareSfx; } }
		public string SkillPrepareSfxSlots { get { return m_SkillPrepareSfxSlots; } }
		public int SkillQuality { get { return m_SkillQuality; } }
		public int SkillType { get { return m_SkillType; } }
		public string Spellposvfx { get { return m_Spellposvfx; } }
		public int TargetSearch { get { return m_TargetSearch; } }
		public int Trigger_param { get { return m_Trigger_param; } }
		public int TriggerTarget { get { return m_TriggerTarget; } }
		public int Use_Silence { get { return m_Use_Silence; } }
		public int Use_Spec { get { return m_Use_Spec; } }
		public float wait_time { get { return m_wait_time; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Skill __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Skill() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Skill ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Skill> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Skill ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Skill();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_ActionMove_range = __mask[ 0 ] ? q.GetFloat( DBCache.FID_ActionMove_range, 16 ) : __default.m_ActionMove_range;
				temp.m_ActionMove_time = __mask[ 1 ] ? q.GetInt( DBCache.FID_ActionMove_time, 15 ) : __default.m_ActionMove_time;
				temp.m_ActionMovepoint = __mask[ 2 ] ? q.GetInt( DBCache.FID_ActionMovepoint, 15 ) : __default.m_ActionMovepoint;
				temp.m_ActionSound = __mask[ 3 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_ActionSound, 11 ) : __default.m_ActionSound;
				temp.m_Angerneed = __mask[ 4 ] ? q.GetInt( DBCache.FID_Angerneed, 9 ) : __default.m_Angerneed;
				temp.m_Aoe = __mask[ 5 ] ? q.GetInt( DBCache.FID_Aoe, 3 ) : __default.m_Aoe;
				temp.m_AoeAngle = __mask[ 6 ] ? q.GetFloat( DBCache.FID_AoeAngle, 8 ) : __default.m_AoeAngle;
				temp.m_Aoeoffset = __mask[ 7 ] ? q.GetInt( DBCache.FID_Aoeoffset, 9 ) : __default.m_Aoeoffset;
				temp.m_AoeRange = __mask[ 8 ] ? q.GetFloat( DBCache.FID_AoeRange, 8 ) : __default.m_AoeRange;
				temp.m_AttackRange = __mask[ 9 ] ? q.GetFloat( DBCache.FID_AttackRange, 11 ) : __default.m_AttackRange;
				temp.m_AttackSfxScale = __mask[ 10 ] ? q.GetInt( DBCache.FID_AttackSfxScale, 14 ) : __default.m_AttackSfxScale;
				temp.m_AttackSfxstate = __mask[ 11 ] ? q.GetInt( DBCache.FID_AttackSfxstate, 14 ) : __default.m_AttackSfxstate;
				temp.m_BeAtkSfxType = __mask[ 13 ] ? q.GetInt( DBCache.FID_BeAtkSfxType, 12 ) : __default.m_BeAtkSfxType;
				temp.m_BeAtkSound = __mask[ 14 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_BeAtkSound, 10 ) : __default.m_BeAtkSound;
				temp.m_BeAttackSfxScale = __mask[ 15 ] ? q.GetInt( DBCache.FID_BeAttackSfxScale, 16 ) : __default.m_BeAttackSfxScale;
				temp.m_BossAlert = __mask[ 16 ] ? q.GetInt( DBCache.FID_BossAlert, 9 ) : __default.m_BossAlert;
				temp.m_Break_skill = __mask[ 17 ] ? q.GetInt( DBCache.FID_Break_skill, 11 ) : __default.m_Break_skill;
				temp.m_cam_zoom = __mask[ 18 ] ? q.GetInt( DBCache.FID_cam_zoom, 8 ) : __default.m_cam_zoom;
				temp.m_cast_dark = __mask[ 19 ] ? q.GetInt( DBCache.FID_cast_dark, 9 ) : __default.m_cast_dark;
				temp.m_cast_darkadd = __mask[ 20 ] ? q.GetInt( DBCache.FID_cast_darkadd, 12 ) : __default.m_cast_darkadd;
				temp.m_cast_shake = __mask[ 21 ] ? q.GetInt( DBCache.FID_cast_shake, 10 ) : __default.m_cast_shake;
				temp.m_CastDuration = __mask[ 22 ] ? q.GetInt( DBCache.FID_CastDuration, 12 ) : __default.m_CastDuration;
				temp.m_ChargeAction = __mask[ 23 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_ChargeAction, 12 ) : __default.m_ChargeAction;
				temp.m_ChargeLimit = __mask[ 24 ] ? q.GetInt( DBCache.FID_ChargeLimit, 11 ) : __default.m_ChargeLimit;
				temp.m_ChargeOffset = __mask[ 25 ] ? q.GetInt( DBCache.FID_ChargeOffset, 12 ) : __default.m_ChargeOffset;
				temp.m_ChargeSfx = __mask[ 26 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_ChargeSfx, 9 ) : __default.m_ChargeSfx;
				temp.m_ChargeSfxScale = __mask[ 27 ] ? q.GetInt( DBCache.FID_ChargeSfxScale, 14 ) : __default.m_ChargeSfxScale;
				temp.m_ChargeSfxSlots = __mask[ 28 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_ChargeSfxSlots, 14 ) : __default.m_ChargeSfxSlots;
				temp.m_ChargeSound = __mask[ 29 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_ChargeSound, 11 ) : __default.m_ChargeSound;
				temp.m_ChargeSpeed = __mask[ 30 ] ? q.GetInt( DBCache.FID_ChargeSpeed, 11 ) : __default.m_ChargeSpeed;
				temp.m_ChargeTime = __mask[ 31 ] ? q.GetInt( DBCache.FID_ChargeTime, 10 ) : __default.m_ChargeTime;
				temp.m_ComboID = __mask[ 32 ] ? q.GetInt( DBCache.FID_ComboID, 7 ) : __default.m_ComboID;
				temp.m_DamageType = __mask[ 34 ] ? q.GetInt( DBCache.FID_DamageType, 10 ) : __default.m_DamageType;
				temp.m_EffectTimes = __mask[ 36 ] ? q.GetInt( DBCache.FID_EffectTimes, 11 ) : __default.m_EffectTimes;
				temp.m_Hiden = __mask[ 37 ] ? q.GetInt( DBCache.FID_Hiden, 5 ) : __default.m_Hiden;
				temp.m_hit_away = __mask[ 38 ] ? q.GetFloat( DBCache.FID_hit_away, 8 ) : __default.m_hit_away;
				temp.m_hit_pause = __mask[ 39 ] ? q.GetInt( DBCache.FID_hit_pause, 9 ) : __default.m_hit_pause;
				temp.m_hit_shake = __mask[ 40 ] ? q.GetInt( DBCache.FID_hit_shake, 9 ) : __default.m_hit_shake;
				temp.m_HoldActionType = __mask[ 41 ] ? q.GetInt( DBCache.FID_HoldActionType, 14 ) : __default.m_HoldActionType;
				temp.m_Lvup_times = __mask[ 42 ] ? q.GetInt( DBCache.FID_Lvup_times, 10 ) : __default.m_Lvup_times;
				temp.m_MaxEffectCount = __mask[ 43 ] ? q.GetInt( DBCache.FID_MaxEffectCount, 14 ) : __default.m_MaxEffectCount;
				temp.m_MissileSfxScale = __mask[ 44 ] ? q.GetInt( DBCache.FID_MissileSfxScale, 15 ) : __default.m_MissileSfxScale;
				temp.m_MissileSound = __mask[ 45 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_MissileSound, 12 ) : __default.m_MissileSound;
				temp.m_NeedActionMove = __mask[ 46 ] ? q.GetInt( DBCache.FID_NeedActionMove, 14 ) : __default.m_NeedActionMove;
				temp.m_NeedCharge = __mask[ 47 ] ? q.GetInt( DBCache.FID_NeedCharge, 10 ) : __default.m_NeedCharge;
				temp.m_play_show1 = __mask[ 50 ] ? q.GetInt( DBCache.FID_play_show1, 10 ) : __default.m_play_show1;
				temp.m_PrepareActionType = __mask[ 51 ] ? q.GetInt( DBCache.FID_PrepareActionType, 17 ) : __default.m_PrepareActionType;
				temp.m_PrepareSfxScale = __mask[ 52 ] ? q.GetInt( DBCache.FID_PrepareSfxScale, 15 ) : __default.m_PrepareSfxScale;
				temp.m_PrepareSound = __mask[ 53 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_PrepareSound, 12 ) : __default.m_PrepareSound;
				temp.m_show_skillname = __mask[ 54 ] ? q.GetInt( DBCache.FID_show_skillname, 14 ) : __default.m_show_skillname;
				temp.m_SimboGroup_id = __mask[ 55 ] ? q.GetInt( DBCache.FID_SimboGroup_id, 13 ) : __default.m_SimboGroup_id;
				temp.m_Skill_SimboInfo = __mask[ 57 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_Skill_SimboInfo, 15 ) : __default.m_Skill_SimboInfo;
				temp.m_Skill_Time = __mask[ 58 ] ? q.GetInt( DBCache.FID_Skill_Time, 10 ) : __default.m_Skill_Time;
				temp.m_SkillAction = __mask[ 59 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillAction, 11 ) : __default.m_SkillAction;
				temp.m_SkillAction_back = __mask[ 60 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillAction_back, 16 ) : __default.m_SkillAction_back;
				temp.m_SkillAttackSfx = __mask[ 61 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillAttackSfx, 14 ) : __default.m_SkillAttackSfx;
				temp.m_SkillAttackSfxSlots = __mask[ 62 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillAttackSfxSlots, 19 ) : __default.m_SkillAttackSfxSlots;
				temp.m_SkillBeAtkSfx = __mask[ 63 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillBeAtkSfx, 13 ) : __default.m_SkillBeAtkSfx;
				temp.m_SkillBeAtkSlots = __mask[ 64 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillBeAtkSlots, 15 ) : __default.m_SkillBeAtkSlots;
				temp.m_SkillClass = __mask[ 65 ] ? q.GetInt( DBCache.FID_SkillClass, 10 ) : __default.m_SkillClass;
				temp.m_SkillCoolDown = __mask[ 66 ] ? q.GetInt( DBCache.FID_SkillCoolDown, 13 ) : __default.m_SkillCoolDown;
				temp.m_SkillGroup_Disturb = __mask[ 67 ] ? q.GetInt( DBCache.FID_SkillGroup_Disturb, 18 ) : __default.m_SkillGroup_Disturb;
				temp.m_SkillGroup_id = __mask[ 68 ] ? q.GetInt( DBCache.FID_SkillGroup_id, 13 ) : __default.m_SkillGroup_id;
				temp.m_SkillGroup_next = __mask[ 70 ] ? q.GetInt( DBCache.FID_SkillGroup_next, 15 ) : __default.m_SkillGroup_next;
				temp.m_SkillIcon = __mask[ 71 ] ? q.GetInt( DBCache.FID_SkillIcon, 9 ) : __default.m_SkillIcon;
				temp.m_SkillInfo = __mask[ 72 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_SkillInfo, 9 ) : __default.m_SkillInfo;
				temp.m_SkillMissileSfx = __mask[ 73 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillMissileSfx, 15 ) : __default.m_SkillMissileSfx;
				temp.m_SkillMissileSfxMode = __mask[ 74 ] ? q.GetInt( DBCache.FID_SkillMissileSfxMode, 19 ) : __default.m_SkillMissileSfxMode;
				temp.m_SkillMissileSfxSlot = __mask[ 75 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillMissileSfxSlot, 19 ) : __default.m_SkillMissileSfxSlot;
				temp.m_SkillMissileSfxType = __mask[ 76 ] ? q.GetInt( DBCache.FID_SkillMissileSfxType, 19 ) : __default.m_SkillMissileSfxType;
				temp.m_SkillMissileSpeed = __mask[ 77 ] ? q.GetInt( DBCache.FID_SkillMissileSpeed, 17 ) : __default.m_SkillMissileSpeed;
				temp.m_SkillName = __mask[ 78 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_SkillName, 9 ) : __default.m_SkillName;
				temp.m_SkillPrepareAction = __mask[ 79 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillPrepareAction, 18 ) : __default.m_SkillPrepareAction;
				temp.m_SkillPrepareRangeSfx = __mask[ 80 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillPrepareRangeSfx, 20 ) : __default.m_SkillPrepareRangeSfx;
				temp.m_SkillPrepareSfx = __mask[ 81 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillPrepareSfx, 15 ) : __default.m_SkillPrepareSfx;
				temp.m_SkillPrepareSfxSlots = __mask[ 82 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_SkillPrepareSfxSlots, 20 ) : __default.m_SkillPrepareSfxSlots;
				temp.m_SkillQuality = __mask[ 83 ] ? q.GetInt( DBCache.FID_SkillQuality, 12 ) : __default.m_SkillQuality;
				temp.m_SkillType = __mask[ 84 ] ? q.GetInt( DBCache.FID_SkillType, 9 ) : __default.m_SkillType;
				temp.m_Spellposvfx = __mask[ 85 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_Spellposvfx, 11 ) : __default.m_Spellposvfx;
				temp.m_TargetSearch = __mask[ 86 ] ? q.GetInt( DBCache.FID_TargetSearch, 12 ) : __default.m_TargetSearch;
				temp.m_Trigger_param = __mask[ 87 ] ? q.GetInt( DBCache.FID_Trigger_param, 13 ) : __default.m_Trigger_param;
				temp.m_TriggerTarget = __mask[ 88 ] ? q.GetInt( DBCache.FID_TriggerTarget, 13 ) : __default.m_TriggerTarget;
				temp.m_Use_Silence = __mask[ 89 ] ? q.GetInt( DBCache.FID_Use_Silence, 11 ) : __default.m_Use_Silence;
				temp.m_Use_Spec = __mask[ 90 ] ? q.GetInt( DBCache.FID_Use_Spec, 8 ) : __default.m_Use_Spec;
				temp.m_wait_time = __mask[ 91 ] ? q.GetFloat( DBCache.FID_wait_time, 9 ) : __default.m_wait_time;
				SkillEx.IsValid_AutoSkillCondition = __mask[ 12 ];
				SkillEx.IsValid_ComboLead = __mask[ 33 ];
				SkillEx.IsValid_Effects = __mask[ 35 ];
				SkillEx.IsValid_PetSkill_lvupitem = __mask[ 48 ];
				SkillEx.IsValid_PetSkill_lvupnum = __mask[ 49 ];
				SkillEx.IsValid_Skill_numdisplay = __mask[ 56 ];
				SkillEx.IsValid_SkillGroup_Lead = __mask[ 69 ];
				if ( SkillEx.onLoadComplexField_AutoSkillCondition != null ) {
					SkillEx.onLoadComplexField_AutoSkillCondition( temp, q );
				}
				if ( SkillEx.onLoadComplexField_ComboLead != null ) {
					SkillEx.onLoadComplexField_ComboLead( temp, q );
				}
				if ( SkillEx.onLoadComplexField_Effects != null ) {
					SkillEx.onLoadComplexField_Effects( temp, q );
				}
				if ( SkillEx.onLoadComplexField_PetSkill_lvupitem != null ) {
					SkillEx.onLoadComplexField_PetSkill_lvupitem( temp, q );
				}
				if ( SkillEx.onLoadComplexField_PetSkill_lvupnum != null ) {
					SkillEx.onLoadComplexField_PetSkill_lvupnum( temp, q );
				}
				if ( SkillEx.onLoadComplexField_Skill_numdisplay != null ) {
					SkillEx.onLoadComplexField_Skill_numdisplay( temp, q );
				}
				if ( SkillEx.onLoadComplexField_SkillGroup_Lead != null ) {
					SkillEx.onLoadComplexField_SkillGroup_Lead( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Skill Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Skill ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x49b35e81;
		#endregion
	}

	public partial class SkillEx {
		public delegate void LoadComplexField( Skill data, LuaDatabase.Query q );
		internal static bool IsValid_AutoSkillCondition = true;
		static LoadComplexField OnLoadComplexField_AutoSkillCondition = null;
		public static LoadComplexField onLoadComplexField_AutoSkillCondition {
			get {
				return OnLoadComplexField_AutoSkillCondition;
			}
		}
		internal static bool IsValid_ComboLead = true;
		static LoadComplexField OnLoadComplexField_ComboLead = null;
		public static LoadComplexField onLoadComplexField_ComboLead {
			get {
				return OnLoadComplexField_ComboLead;
			}
		}
		internal static bool IsValid_Effects = true;
		static LoadComplexField OnLoadComplexField_Effects = null;
		public static LoadComplexField onLoadComplexField_Effects {
			get {
				return OnLoadComplexField_Effects;
			}
		}
		internal static bool IsValid_PetSkill_lvupitem = true;
		static LoadComplexField OnLoadComplexField_PetSkill_lvupitem = null;
		public static LoadComplexField onLoadComplexField_PetSkill_lvupitem {
			get {
				return OnLoadComplexField_PetSkill_lvupitem;
			}
		}
		internal static bool IsValid_PetSkill_lvupnum = true;
		static LoadComplexField OnLoadComplexField_PetSkill_lvupnum = null;
		public static LoadComplexField onLoadComplexField_PetSkill_lvupnum {
			get {
				return OnLoadComplexField_PetSkill_lvupnum;
			}
		}
		internal static bool IsValid_Skill_numdisplay = true;
		static LoadComplexField OnLoadComplexField_Skill_numdisplay = null;
		public static LoadComplexField onLoadComplexField_Skill_numdisplay {
			get {
				return OnLoadComplexField_Skill_numdisplay;
			}
		}
		internal static bool IsValid_SkillGroup_Lead = true;
		static LoadComplexField OnLoadComplexField_SkillGroup_Lead = null;
		public static LoadComplexField onLoadComplexField_SkillGroup_Lead {
			get {
				return OnLoadComplexField_SkillGroup_Lead;
			}
		}
	}
}
//EOF
