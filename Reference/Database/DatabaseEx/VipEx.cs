//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
#endif

namespace Database {
    public partial class VipEx {
        static VipEx() {
            OnLoadComplexField_level_item = Vip.onLoadComplexField_level_item;
            OnLoadComplexField_power = Vip.onLoadComplexField_power;
            OnLoadComplexField_specialItem = Vip.onLoadComplexField_specialItem;
            OnLoadComplexField_model_hight = Vip.onLoadComplexField_modelHight;
            OnLoadComplexField_model_zoom = Vip.onLoadComplexField_modelZoom;
            OnLoadComplexField_model_s = Vip.onLoadComplexField_modelScale;
        }
    }

    public partial class Vip {
        private TArray<double> m_modelZoom = null;
        private TArray<double> m_modelHight = null;
        private TArray<double> m_modelScale = null;

        private TArray<int> m_powers = null;
        private TArray<TArray<int>> m_items = null;
        private TArray<TArray<int>> m_specialItems = null;

        public TArray<TArray<int>> items { get { return m_items; } }
        public TArray<int> powers { get { return m_powers; } }
        public TArray<TArray<int>> specialItems { get { return m_specialItems; } }
        public float modelZoom { get { return m_modelZoom.Length > 0 ? (float)m_modelZoom[0] : 1; } }
        public TArray<double> modelHight { get { return m_modelHight; } }
        public TArray<double> modelScale { get { return m_modelScale; } }


        internal static void onLoadComplexField_level_item( Vip data, LuaDatabase.Query q ) {
			data.m_items = VipEx.IsValid_level_item ? Dataset.LoadIntArray2d( "level_item", q ) : __default.m_items;
        }

        internal static void onLoadComplexField_power( Vip data, LuaDatabase.Query q ) {
			data.m_powers = VipEx.IsValid_power ? Dataset.LoadIntArray( "power", q ) : __default.m_powers;
        }

        internal static void onLoadComplexField_specialItem( Vip data, LuaDatabase.Query q ) {
            data.m_specialItems = VipEx.IsValid_specialItem ? Dataset.LoadIntArray2d( "specialItem", q ) : __default.specialItems;
        }

        internal static void onLoadComplexField_modelZoom( Vip data, LuaDatabase.Query q ) {
            data.m_modelZoom = VipEx.IsValid_model_zoom ? Dataset.LoadNumberArray( "model_zoom", q ) : __default.m_modelZoom;
        }

        internal static void onLoadComplexField_modelHight( Vip data, LuaDatabase.Query q ) {
            data.m_modelHight = VipEx.IsValid_model_hight ? Dataset.LoadNumberArray( "model_hight", q ) : __default.m_modelHight;
        }

        internal static void onLoadComplexField_modelScale( Vip data, LuaDatabase.Query q ) {
            data.m_modelScale = VipEx.IsValid_model_s ? Dataset.LoadNumberArray( "model_s", q ) : __default.m_modelScale;
        }
    }
}
//EOF
