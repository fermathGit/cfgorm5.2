//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
using UniLuax;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
#endif

namespace Database {
    public partial class MainMenuEx {
        static MainMenuEx() {
            OnLoadComplexField_guidesetting = MainMenu.LoadComplexField_guidesetting;
        }
    }

    public partial class MainMenu {

        public enum TType {
            MainMenuCenter = 1,     //主菜单显示――中央
            MainMenuLeft = 2,       //主菜单显示--左边
            MainMenuRight = 3,      //主菜单显示--右边
            MainBottom = 8,         //主界面底部显示
            MainTopLeft = 9,        //主界面右上
            MainTopShow = 10,       //主界面显示（强制显示）
            MainTopHide = 11,       //主界面显示（可隐藏）
            FlexibleNoHide = 16,    //归属于福利页面下面的
        }

        public enum TOpenType {
            byLevel = 1,
            byTask = 2
        }

        static Dictionary<int, List<MainMenu>> m_mainMenuTypeDic = new Dictionary<int, List<MainMenu>>();
        private TArray<int> m_guidesetting = null;
        public TArray<int> guidesetting { get { return m_guidesetting; } }

        public static List<MainMenu> GetMainMenuByType( TType type ) {
            return GetMainMenuByType( (int)type );
        }

        public static List<MainMenu> GetMainMenuByType( int type ) {
            if( m_mainMenuTypeDic.Count <= 0 ) {
                InitMainMenuTypeDic();
            }
            List<MainMenu> ret = null;
            m_mainMenuTypeDic.TryGetValue( (int)type, out ret );
            return ret;
        }

        static void InitMainMenuTypeDic() {
            m_mainMenuTypeDic.Clear();

            var menuKey = MainMenu.GetKeys();
            for( int i = 0; i < menuKey.Count; ++i ) {
                AddMainMenuTypeDic( MainMenu.Get( menuKey[i] ) );
            }

            foreach( var menus in m_mainMenuTypeDic.Values ) {
                menus.Sort( ( a, b ) => { return a.sort - b.sort; } );
            }
        }

        static void AddMainMenuTypeDic( MainMenu mm ) {
            if( mm != null ) {
                List<MainMenu> ret = null;
                m_mainMenuTypeDic.TryGetValue( mm.effect, out ret );
                if( ret == null ) {
                    ret = new List<MainMenu>();
                    m_mainMenuTypeDic[mm.effect] = ret;
                }
                ret.Add( mm );
            }
        }

        public static void ClearCacheEx() {
            m_mainMenuTypeDic.Clear();
        }


        #region showTipPanel
        static Dictionary<int, int> m_mainMenuOpenByLevelDic = null;       // <level,mainMenuId> 
        static Dictionary<int, int> m_mainMenuOpenByTaskDic = null;        // <TaskId,mainMenuId> 

        //0代表没有
        public static int GetMainMenuNeedShowParametersByLevel( int level ) { 
            int ret = 0;
            if ( m_mainMenuOpenByLevelDic == null ) {
                GetData_mainMenuOpenByLevelDic();
            }

            m_mainMenuOpenByLevelDic.TryGetValue( level, out ret );
            return ret;
        }

        //0代表没有
        public static int GetMainMenuNeedShowParametersByTask( int taskId ) {
            int ret = 0;
            if ( m_mainMenuOpenByTaskDic == null ) {
                GetData_mainMenuOpenByTasklDic();
            }

            m_mainMenuOpenByTaskDic.TryGetValue( taskId, out ret );
            return ret;
        }


        static void GetData_mainMenuOpenByLevelDic() {
            m_mainMenuOpenByLevelDic = new Dictionary<int, int>();

            var menuKey = MainMenu.GetKeys();
            for ( int i = 0; i < menuKey.Count; ++i ) {
                var data = MainMenu.Get( menuKey[i] );
                if ( data != null && data.showpane != 0 && data.type == (int)TOpenType.byLevel ) {
                    AddMainMenuOpenByLevelDic( data.Parameters, menuKey[i] );
                }
            }
        }

        static void GetData_mainMenuOpenByTasklDic() {
            m_mainMenuOpenByTaskDic = new Dictionary<int, int>();

            var menuKey = MainMenu.GetKeys();
            for ( int i = 0; i < menuKey.Count; ++i ) {
                var data = MainMenu.Get( menuKey[i] );
                if ( data != null && data.showpane != 0 && data.type == (int)TOpenType.byTask ) {
                    AddMainMenuOpenByTaskDic( data.Parameters, menuKey[i] );
                }
            }
        }

        static void AddMainMenuOpenByLevelDic( int key ,int value ) {
            int tryValue = 0;
            m_mainMenuOpenByLevelDic.TryGetValue( key, out tryValue );
            if ( tryValue == 0 ) {
                m_mainMenuOpenByLevelDic[key] = value;
            }
        }

        static void AddMainMenuOpenByTaskDic( int key, int value ) {
            int tryValue = 0;
            m_mainMenuOpenByTaskDic.TryGetValue( key, out tryValue );
            if ( tryValue == 0 ) {
                m_mainMenuOpenByTaskDic[key] = value;
            }
        }


        internal static void LoadComplexField_guidesetting( MainMenu data, LuaDatabase.Query q ) {
            data.m_guidesetting = MainMenuEx.IsValid_guidesetting ? Dataset.LoadIntArray( "guidesetting", q ) : __default.guidesetting;
        }

        #endregion
    }
}
//EOF
