//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Menu_Hide {
		const string DBName = "Menu_hide";
		#region members
		private int m_id = 0;
		private int m_Active_open = 0;
		private int m_Auto = 0;
		private int m_bag = 0;
		private int m_CallOthers = 0;
		private int m_Camera = 0;
		private int m_chat_board = 0;
		private string m_desc = String.Empty;
		private int m_Fixbutton = 0;
		private int m_Friend = 0;
		private int m_Fullbagbutton = 0;
		private int m_Growup = 0;
		private int m_head_menu = 0;
		private int m_HideHead = 0;
		private int m_infobutton = 0;
		private int m_Left_menu = 0;
		private int m_Main_menu = 0;
		private int m_Mallbutton = 0;
		private int m_Messagebutton = 0;
		private int m_minimap = 0;
		private int m_nextmenu = 0;
		private int m_redbags = 0;
		private int m_task = 0;
		private int m_tips = 0;
		private int m_worldlevel = 0;
		private int m_zoom_menu = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Menu_Hide> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Menu_Hide>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int Active_open { get { return m_Active_open; } }
		public int Auto { get { return m_Auto; } }
		public int bag { get { return m_bag; } }
		public int CallOthers { get { return m_CallOthers; } }
		public int Camera { get { return m_Camera; } }
		public int chat_board { get { return m_chat_board; } }
		public string desc { get { return m_desc; } }
		public int Fixbutton { get { return m_Fixbutton; } }
		public int Friend { get { return m_Friend; } }
		public int Fullbagbutton { get { return m_Fullbagbutton; } }
		public int Growup { get { return m_Growup; } }
		public int head_menu { get { return m_head_menu; } }
		public int HideHead { get { return m_HideHead; } }
		public int infobutton { get { return m_infobutton; } }
		public int Left_menu { get { return m_Left_menu; } }
		public int Main_menu { get { return m_Main_menu; } }
		public int Mallbutton { get { return m_Mallbutton; } }
		public int Messagebutton { get { return m_Messagebutton; } }
		public int minimap { get { return m_minimap; } }
		public int nextmenu { get { return m_nextmenu; } }
		public int redbags { get { return m_redbags; } }
		public int task { get { return m_task; } }
		public int tips { get { return m_tips; } }
		public int worldlevel { get { return m_worldlevel; } }
		public int zoom_menu { get { return m_zoom_menu; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Menu_Hide __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Menu_Hide() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Menu_Hide ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Menu_Hide> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Menu_Hide ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Menu_Hide();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_Active_open = __mask[ 0 ] ? q.GetInt( DBCache.FID_Active_open, 11 ) : __default.m_Active_open;
				temp.m_Auto = __mask[ 1 ] ? q.GetInt( DBCache.FID_Auto, 4 ) : __default.m_Auto;
				temp.m_bag = __mask[ 2 ] ? q.GetInt( DBCache.FID_bag, 3 ) : __default.m_bag;
				temp.m_CallOthers = __mask[ 3 ] ? q.GetInt( DBCache.FID_CallOthers, 10 ) : __default.m_CallOthers;
				temp.m_Camera = __mask[ 4 ] ? q.GetInt( DBCache.FID_Camera, 6 ) : __default.m_Camera;
				temp.m_chat_board = __mask[ 5 ] ? q.GetInt( DBCache.FID_chat_board, 10 ) : __default.m_chat_board;
				temp.m_desc = __mask[ 6 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc, 4 ) : __default.m_desc;
				temp.m_Fixbutton = __mask[ 7 ] ? q.GetInt( DBCache.FID_Fixbutton, 9 ) : __default.m_Fixbutton;
				temp.m_Friend = __mask[ 8 ] ? q.GetInt( DBCache.FID_Friend, 6 ) : __default.m_Friend;
				temp.m_Fullbagbutton = __mask[ 9 ] ? q.GetInt( DBCache.FID_Fullbagbutton, 13 ) : __default.m_Fullbagbutton;
				temp.m_Growup = __mask[ 10 ] ? q.GetInt( DBCache.FID_Growup, 6 ) : __default.m_Growup;
				temp.m_head_menu = __mask[ 11 ] ? q.GetInt( DBCache.FID_head_menu, 9 ) : __default.m_head_menu;
				temp.m_HideHead = __mask[ 12 ] ? q.GetInt( DBCache.FID_HideHead, 8 ) : __default.m_HideHead;
				temp.m_infobutton = __mask[ 13 ] ? q.GetInt( DBCache.FID_infobutton, 10 ) : __default.m_infobutton;
				temp.m_Left_menu = __mask[ 14 ] ? q.GetInt( DBCache.FID_Left_menu, 9 ) : __default.m_Left_menu;
				temp.m_Main_menu = __mask[ 15 ] ? q.GetInt( DBCache.FID_Main_menu, 9 ) : __default.m_Main_menu;
				temp.m_Mallbutton = __mask[ 16 ] ? q.GetInt( DBCache.FID_Mallbutton, 10 ) : __default.m_Mallbutton;
				temp.m_Messagebutton = __mask[ 17 ] ? q.GetInt( DBCache.FID_Messagebutton, 13 ) : __default.m_Messagebutton;
				temp.m_minimap = __mask[ 18 ] ? q.GetInt( DBCache.FID_minimap, 7 ) : __default.m_minimap;
				temp.m_nextmenu = __mask[ 19 ] ? q.GetInt( DBCache.FID_nextmenu, 8 ) : __default.m_nextmenu;
				temp.m_redbags = __mask[ 20 ] ? q.GetInt( DBCache.FID_redbags, 7 ) : __default.m_redbags;
				temp.m_task = __mask[ 21 ] ? q.GetInt( DBCache.FID_task, 4 ) : __default.m_task;
				temp.m_tips = __mask[ 22 ] ? q.GetInt( DBCache.FID_tips, 4 ) : __default.m_tips;
				temp.m_worldlevel = __mask[ 23 ] ? q.GetInt( DBCache.FID_worldlevel, 10 ) : __default.m_worldlevel;
				temp.m_zoom_menu = __mask[ 24 ] ? q.GetInt( DBCache.FID_zoom_menu, 9 ) : __default.m_zoom_menu;
				return temp;
			}
			return null;
		}

 		public static Menu_Hide Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Menu_Hide ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x73686311;
		#endregion
	}
}
//EOF
