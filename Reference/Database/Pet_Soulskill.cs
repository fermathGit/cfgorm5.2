//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Pet_Soulskill {
		const string DBName = "pet_soulskill";
		#region members
		private int m_id = 0;
		private string m_attes = String.Empty;
		private string m_dec = String.Empty;
		private int m_icon = 0;
		private int m_level = 0;
		private string m_name = String.Empty;
		private int m_passiveSkillId = 0;
		private int m_quilaty = 0;
		private int m_soulSkillId = 0;
		private int m_type = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Pet_Soulskill> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Pet_Soulskill>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public string attes { get { return m_attes; } }
		public string dec { get { return m_dec; } }
		public int icon { get { return m_icon; } }
		public int level { get { return m_level; } }
		public string name { get { return m_name; } }
		public int passiveSkillId { get { return m_passiveSkillId; } }
		public int quilaty { get { return m_quilaty; } }
		public int soulSkillId { get { return m_soulSkillId; } }
		public int type { get { return m_type; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Pet_Soulskill __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Pet_Soulskill() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Pet_Soulskill ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Pet_Soulskill> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Pet_Soulskill ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Pet_Soulskill();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_attes = __mask[ 0 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_attes, 5 ) : __default.m_attes;
				temp.m_dec = __mask[ 2 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_dec, 3 ) : __default.m_dec;
				temp.m_icon = __mask[ 3 ] ? q.GetInt( DBCache.FID_icon, 4 ) : __default.m_icon;
				temp.m_level = __mask[ 4 ] ? q.GetInt( DBCache.FID_level, 5 ) : __default.m_level;
				temp.m_name = __mask[ 5 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_name, 4 ) : __default.m_name;
				temp.m_passiveSkillId = __mask[ 6 ] ? q.GetInt( DBCache.FID_passiveSkillId, 14 ) : __default.m_passiveSkillId;
				temp.m_quilaty = __mask[ 7 ] ? q.GetInt( DBCache.FID_quilaty, 7 ) : __default.m_quilaty;
				temp.m_soulSkillId = __mask[ 8 ] ? q.GetInt( DBCache.FID_soulSkillId, 11 ) : __default.m_soulSkillId;
				temp.m_type = __mask[ 9 ] ? q.GetInt( DBCache.FID_type, 4 ) : __default.m_type;
				Pet_SoulskillEx.IsValid_attToOwner = __mask[ 1 ];
				if ( Pet_SoulskillEx.onLoadComplexField_attToOwner != null ) {
					Pet_SoulskillEx.onLoadComplexField_attToOwner( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Pet_Soulskill Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Pet_Soulskill ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x72362242;
		#endregion
	}

	public partial class Pet_SoulskillEx {
		public delegate void LoadComplexField( Pet_Soulskill data, LuaDatabase.Query q );
		internal static bool IsValid_attToOwner = true;
		static LoadComplexField OnLoadComplexField_attToOwner = null;
		public static LoadComplexField onLoadComplexField_attToOwner {
			get {
				return OnLoadComplexField_attToOwner;
			}
		}
	}
}
//EOF
