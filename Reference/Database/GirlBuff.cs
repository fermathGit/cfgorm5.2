//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
#endif

namespace Database {
	public partial class GirlBuff {
		const string DBName = "girlbuff";
		#region members
		private int m_id = 0;
		private int m_Buff_1close = 0;
		private int m_Buff_1cost = 0;
		private int m_Buff_2close = 0;
		private int m_Buff_2cost = 0;
		private int m_Buff_3close = 0;
		private int m_Buff_3cost = 0;
		private int m_Buff_4close = 0;
		private int m_Buff_4cost = 0;
		private int m_Buff_5close = 0;
		private int m_Buff_5cost = 0;
		private int m_Buff_6close = 0;
		private int m_Buff_6cost = 0;
		private int m_Buff_7close = 0;
		private int m_Buff_7cost = 0;
		#endregion
		#region caches
		private static List<int> m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, GirlBuff> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, GirlBuff>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int Buff_1close { get { return m_Buff_1close; } }
		public int Buff_1cost { get { return m_Buff_1cost; } }
		public int Buff_2close { get { return m_Buff_2close; } }
		public int Buff_2cost { get { return m_Buff_2cost; } }
		public int Buff_3close { get { return m_Buff_3close; } }
		public int Buff_3cost { get { return m_Buff_3cost; } }
		public int Buff_4close { get { return m_Buff_4close; } }
		public int Buff_4cost { get { return m_Buff_4cost; } }
		public int Buff_5close { get { return m_Buff_5close; } }
		public int Buff_5cost { get { return m_Buff_5cost; } }
		public int Buff_6close { get { return m_Buff_6close; } }
		public int Buff_6cost { get { return m_Buff_6cost; } }
		public int Buff_7close { get { return m_Buff_7close; } }
		public int Buff_7cost { get { return m_Buff_7cost; } }
		#endregion
		#region method
		static GirlBuff() {
			if ( LuaDatabase.sharedInstance.Load( DBName ) ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( GirlBuff ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, GirlBuff> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return LuaDatabase.sharedInstance.Load( DBName );
		}

		public static bool Load() {
			return LuaDatabase.sharedInstance.Load( DBName );
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ClearCache();
			return ret;
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				LuaDatabase.LuaTable_iForEach( L,
					( _L, id ) => {
						using ( var q = db.CreateQuery( -1, DBName ) ) {
							var value = ReadOne( q, id );
							if ( value != null ) {
								m_idCache.Add( id, value );
							}
						}
					}
				);
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static List<int> GetKeys( bool sort = false, Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, sort, pred );
			}
			var ids = m_ids;
			if ( sort ) {
				int count = m_ids.Count;
				ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					ids.Add( m_ids[i] );
				}
				if ( pred == null ) {
					ids.Sort();
				} else {
					ids.Sort( pred );
				}
			}
			return ids;;
		}

		static GirlBuff ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new GirlBuff();
				temp.m_id = id;
				temp.m_Buff_1close = q.GetInt( "Buff_1close" );
				temp.m_Buff_1cost = q.GetInt( "Buff_1cost" );
				temp.m_Buff_2close = q.GetInt( "Buff_2close" );
				temp.m_Buff_2cost = q.GetInt( "Buff_2cost" );
				temp.m_Buff_3close = q.GetInt( "Buff_3close" );
				temp.m_Buff_3cost = q.GetInt( "Buff_3cost" );
				temp.m_Buff_4close = q.GetInt( "Buff_4close" );
				temp.m_Buff_4cost = q.GetInt( "Buff_4cost" );
				temp.m_Buff_5close = q.GetInt( "Buff_5close" );
				temp.m_Buff_5cost = q.GetInt( "Buff_5cost" );
				temp.m_Buff_6close = q.GetInt( "Buff_6close" );
				temp.m_Buff_6cost = q.GetInt( "Buff_6cost" );
				temp.m_Buff_7close = q.GetInt( "Buff_7close" );
				temp.m_Buff_7cost = q.GetInt( "Buff_7cost" );
				return temp;
			}
			return null;
		}

 		public static GirlBuff Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			GirlBuff ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		#endregion
	}
}
//EOF
