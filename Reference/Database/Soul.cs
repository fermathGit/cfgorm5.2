//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Soul {
		const string DBName = "soul";
		#region members
		private int m_id = 0;
		private int m_atk_num = 0;
		private int m_autoPut = 0;
		private int m_challengeId = 0;
		private string m_desc = String.Empty;
		private string m_desc_active = String.Empty;
		private string m_desc_attribute = String.Empty;
		private string m_desc_mapname = String.Empty;
		private string m_desc_open = String.Empty;
		private string m_desc_skill = String.Empty;
		private string m_desc_tittle = String.Empty;
		private string m_gd_read = String.Empty;
		private int m_gettype = 0;
		private int m_groupId = 0;
		private float m_hpRecovery = 0;
		private int m_icon = 0;
		private int m_ifhide = 0;
		private int m_model = 0;
		private float m_model_hight = 0;
		private float m_model_hight_copy = 0;
		private int m_model_hight_UI = 0;
		private float m_model_zoom_copy = 0;
		private float m_model_zoom_scene = 0;
		private float m_model_zoom_UI = 0;
		private string m_name = String.Empty;
		private int m_type = 0;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Soul> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Soul>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public int atk_num { get { return m_atk_num; } }
		public int autoPut { get { return m_autoPut; } }
		public int challengeId { get { return m_challengeId; } }
		public string desc { get { return m_desc; } }
		public string desc_active { get { return m_desc_active; } }
		public string desc_attribute { get { return m_desc_attribute; } }
		public string desc_mapname { get { return m_desc_mapname; } }
		public string desc_open { get { return m_desc_open; } }
		public string desc_skill { get { return m_desc_skill; } }
		public string desc_tittle { get { return m_desc_tittle; } }
		public string gd_read { get { return m_gd_read; } }
		public int gettype { get { return m_gettype; } }
		public int groupId { get { return m_groupId; } }
		public float hpRecovery { get { return m_hpRecovery; } }
		public int icon { get { return m_icon; } }
		public int ifhide { get { return m_ifhide; } }
		public int model { get { return m_model; } }
		public float model_hight { get { return m_model_hight; } }
		public float model_hight_copy { get { return m_model_hight_copy; } }
		public int model_hight_UI { get { return m_model_hight_UI; } }
		public float model_zoom_copy { get { return m_model_zoom_copy; } }
		public float model_zoom_scene { get { return m_model_zoom_scene; } }
		public float model_zoom_UI { get { return m_model_zoom_UI; } }
		public string name { get { return m_name; } }
		public int type { get { return m_type; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Soul __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Soul() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Soul ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Soul> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Soul ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Soul();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_atk_num = __mask[ 1 ] ? q.GetInt( DBCache.FID_atk_num, 7 ) : __default.m_atk_num;
				temp.m_autoPut = __mask[ 4 ] ? q.GetInt( DBCache.FID_autoPut, 7 ) : __default.m_autoPut;
				temp.m_challengeId = __mask[ 5 ] ? q.GetInt( DBCache.FID_challengeId, 11 ) : __default.m_challengeId;
				temp.m_desc = __mask[ 6 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc, 4 ) : __default.m_desc;
				temp.m_desc_active = __mask[ 7 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc_active, 11 ) : __default.m_desc_active;
				temp.m_desc_attribute = __mask[ 8 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc_attribute, 14 ) : __default.m_desc_attribute;
				temp.m_desc_mapname = __mask[ 9 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc_mapname, 12 ) : __default.m_desc_mapname;
				temp.m_desc_open = __mask[ 10 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc_open, 9 ) : __default.m_desc_open;
				temp.m_desc_skill = __mask[ 11 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc_skill, 10 ) : __default.m_desc_skill;
				temp.m_desc_tittle = __mask[ 12 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc_tittle, 11 ) : __default.m_desc_tittle;
				temp.m_gd_read = __mask[ 13 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_gd_read, 7 ) : __default.m_gd_read;
				temp.m_gettype = __mask[ 14 ] ? q.GetInt( DBCache.FID_gettype, 7 ) : __default.m_gettype;
				temp.m_groupId = __mask[ 15 ] ? q.GetInt( DBCache.FID_groupId, 7 ) : __default.m_groupId;
				temp.m_hpRecovery = __mask[ 16 ] ? q.GetFloat( DBCache.FID_hpRecovery, 10 ) : __default.m_hpRecovery;
				temp.m_icon = __mask[ 17 ] ? q.GetInt( DBCache.FID_icon, 4 ) : __default.m_icon;
				temp.m_ifhide = __mask[ 18 ] ? q.GetInt( DBCache.FID_ifhide, 6 ) : __default.m_ifhide;
				temp.m_model = __mask[ 19 ] ? q.GetInt( DBCache.FID_model, 5 ) : __default.m_model;
				temp.m_model_hight = __mask[ 20 ] ? q.GetFloat( DBCache.FID_model_hight, 11 ) : __default.m_model_hight;
				temp.m_model_hight_copy = __mask[ 21 ] ? q.GetFloat( DBCache.FID_model_hight_copy, 16 ) : __default.m_model_hight_copy;
				temp.m_model_hight_UI = __mask[ 22 ] ? q.GetInt( DBCache.FID_model_hight_UI, 14 ) : __default.m_model_hight_UI;
				temp.m_model_zoom_copy = __mask[ 23 ] ? q.GetFloat( DBCache.FID_model_zoom_copy, 15 ) : __default.m_model_zoom_copy;
				temp.m_model_zoom_scene = __mask[ 24 ] ? q.GetFloat( DBCache.FID_model_zoom_scene, 16 ) : __default.m_model_zoom_scene;
				temp.m_model_zoom_UI = __mask[ 25 ] ? q.GetFloat( DBCache.FID_model_zoom_UI, 13 ) : __default.m_model_zoom_UI;
				temp.m_name = __mask[ 26 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_name, 4 ) : __default.m_name;
				temp.m_type = __mask[ 28 ] ? q.GetInt( DBCache.FID_type, 4 ) : __default.m_type;
				SoulEx.IsValid_activeSkillId = __mask[ 0 ];
				SoulEx.IsValid_attributes = __mask[ 2 ];
				SoulEx.IsValid_attributes_special = __mask[ 3 ];
				SoulEx.IsValid_needConditiones = __mask[ 27 ];
				if ( SoulEx.onLoadComplexField_activeSkillId != null ) {
					SoulEx.onLoadComplexField_activeSkillId( temp, q );
				}
				if ( SoulEx.onLoadComplexField_attributes != null ) {
					SoulEx.onLoadComplexField_attributes( temp, q );
				}
				if ( SoulEx.onLoadComplexField_attributes_special != null ) {
					SoulEx.onLoadComplexField_attributes_special( temp, q );
				}
				if ( SoulEx.onLoadComplexField_needConditiones != null ) {
					SoulEx.onLoadComplexField_needConditiones( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Soul Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Soul ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x5f040261;
		#endregion
	}

	public partial class SoulEx {
		public delegate void LoadComplexField( Soul data, LuaDatabase.Query q );
		internal static bool IsValid_activeSkillId = true;
		static LoadComplexField OnLoadComplexField_activeSkillId = null;
		public static LoadComplexField onLoadComplexField_activeSkillId {
			get {
				return OnLoadComplexField_activeSkillId;
			}
		}
		internal static bool IsValid_attributes = true;
		static LoadComplexField OnLoadComplexField_attributes = null;
		public static LoadComplexField onLoadComplexField_attributes {
			get {
				return OnLoadComplexField_attributes;
			}
		}
		internal static bool IsValid_attributes_special = true;
		static LoadComplexField OnLoadComplexField_attributes_special = null;
		public static LoadComplexField onLoadComplexField_attributes_special {
			get {
				return OnLoadComplexField_attributes_special;
			}
		}
		internal static bool IsValid_needConditiones = true;
		static LoadComplexField OnLoadComplexField_needConditiones = null;
		public static LoadComplexField onLoadComplexField_needConditiones {
			get {
				return OnLoadComplexField_needConditiones;
			}
		}
	}
}
//EOF
