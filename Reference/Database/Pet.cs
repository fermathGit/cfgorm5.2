//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY LUA DATABASE TOOL.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.Collections.Generic;
using Common;
#if USE_NATIVE_LUA
using NLuaState = NativeLua.NLuaState;
using LuaType = NativeLua.LuaDLL;
using LuaTinker = NativeLua.LuaTinker;
using LuaDatabase = NativeLua.LuaDatabase;
using LuaTableHandle = System.Int64;
using LuaStateHandle = System.IntPtr;
#else
using NLuaState = UniLua.ILuaState;
using LuaType = UniLua.LuaType;
using LuaTinker = UniLuax.LuaTinker;
using LuaDatabase = UniLuax.LuaDatabase;
using LuaTableHandle = System.Object;
using LuaStateHandle = UniLua.ILuaState;
#endif

namespace Database {
	public partial class Pet {
		const string DBName = "pet";
		#region members
		private int m_id = 0;
		private string m_back_vfx = String.Empty;
		private int m_baseskill = 0;
		private int m_bornskill = 0;
		private string m_cast_vfx = String.Empty;
		private int m_critical_ex = 0;
		private string m_desc = String.Empty;
		private int m_hyper_varatk_ex = 0;
		private int m_hyper_varblood_ex = 0;
		private int m_model_angle = 0;
		private int m_model_hight = 0;
		private int m_pet_quality = 0;
		private float m_pet_talent_max = 0;
		private int m_peticon = 0;
		private int m_petmodel = 0;
		private float m_petmodel_scale = 0;
		private float m_petmodel_scale_ui = 0;
		private string m_petname = String.Empty;
		private float m_petradius = 0;
		private int m_pettype = 0;
		private int m_proctectedSkill = 0;
		private int m_recovery = 0;
		private float m_RunSpeedBase = 0;
		private int m_RunSpeedScale = 0;
		private int m_show4 = 0;
		private int m_showplane = 0;
		private string m_talk1 = String.Empty;
		private string m_talk2 = String.Empty;
		private int m_type = 0;
		private string m_vfx_slot = String.Empty;
		#endregion
		#region caches
		private static IKeys m_ids = null;
		private static Common.Collections.Generic.Lit.Dictionary<int, Pet> m_idCache = new Common.Collections.Generic.Lit.Dictionary<int, Pet>();
		#endregion
		#region properties
		public int id { get { return m_id; } }
		public string back_vfx { get { return m_back_vfx; } }
		public int baseskill { get { return m_baseskill; } }
		public int bornskill { get { return m_bornskill; } }
		public string cast_vfx { get { return m_cast_vfx; } }
		public int critical_ex { get { return m_critical_ex; } }
		public string desc { get { return m_desc; } }
		public int hyper_varatk_ex { get { return m_hyper_varatk_ex; } }
		public int hyper_varblood_ex { get { return m_hyper_varblood_ex; } }
		public int model_angle { get { return m_model_angle; } }
		public int model_hight { get { return m_model_hight; } }
		public int pet_quality { get { return m_pet_quality; } }
		public float pet_talent_max { get { return m_pet_talent_max; } }
		public int peticon { get { return m_peticon; } }
		public int petmodel { get { return m_petmodel; } }
		public float petmodel_scale { get { return m_petmodel_scale; } }
		public float petmodel_scale_ui { get { return m_petmodel_scale_ui; } }
		public string petname { get { return m_petname; } }
		public float petradius { get { return m_petradius; } }
		public int pettype { get { return m_pettype; } }
		public int proctectedSkill { get { return m_proctectedSkill; } }
		public int recovery { get { return m_recovery; } }
		public float RunSpeedBase { get { return m_RunSpeedBase; } }
		public int RunSpeedScale { get { return m_RunSpeedScale; } }
		public int show4 { get { return m_show4; } }
		public int showplane { get { return m_showplane; } }
		public string talk1 { get { return m_talk1; } }
		public string talk2 { get { return m_talk2; } }
		public int type { get { return m_type; } }
		public string vfx_slot { get { return m_vfx_slot; } }
		#endregion
		#region method
		static LuaTableHandle __this = default( LuaTableHandle );
		static Pet __default = null;
		static int __hash = 0;
		static bool __masked = false;

		static Pet() {
			LuaDatabase.datasetUnloadEvent += OnUnload;
			if ( Load() ) {
				DBLoadedItems.MarkAutoLoaded( DBName, typeof( Pet ) );
			}
		}

		public static String DbName {
			get { return DBName; }
		}

		public static Common.Collections.Generic.Lit.Dictionary<int, Pet> idCacheData {
			get { return m_idCache; }
		}

		public static void Touch() {
		}

		public static bool EnsureLoaded() {
			return Load();
		}

		static void ReadDefault() {
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				if ( L.IsTable( -1 ) ) {
					L.GetMetaTable( -1 );
					if ( L.IsTable( -1 ) ) {
						__this = ( LuaTableHandle )L.ToObject( -1 );
						var table = new LuaTinker.Table( L, -1 );
						var subTable = table.GetSubTable( "__default" );
						__masked = table.Get<bool>( "__masked", false );
						__hash = table.Get<int>( "__hash", 0 );
						if ( subTable != LuaTinker.Table.Empty && __hash == VersionHash ) {
							using ( var q = db.CreateQuery( subTable.index ) ) {
								__default = ReadOne( q, default( int ) );
							}
						} else {
							if ( __hash != 0 ) {
								ULogFile.sharedInstance.LogError( "Database {0} version mismatch, reader = 0x{1:x8}, data = 0x{2:x8}, masked = {3} ", DBName, VersionHash, __hash, __masked );
							}
							__masked = false;
						}
					}
				}
			} finally {
				db.SetLuaTop( top );
			}
		}

		public static bool Load() {
			bool alreadyLoaded;
			var r = LuaDatabase.sharedInstance.Load( DBName, out alreadyLoaded );
			if ( r && !alreadyLoaded ) {
				ReadDefault();
			}
			return r;
		}

		public static bool IsLoaded() {
			return LuaDatabase.sharedInstance.IsLoaded( DBName );
		}

		public static bool Unload() {
			return LuaDatabase.sharedInstance.Unload( DBName );
		}

		public static bool Reload() {
			bool ret = LuaDatabase.sharedInstance.Reload( DBName );
			ReadDefault();
			ClearCache();
			return ret;
		}

		static void OnUnload( LuaStateHandle L, LuaTableHandle tablePtr, String name ) {
			if ( name == DBName && tablePtr == __this ) {
				__this = default( LuaTableHandle );
				__default = null;
				__hash = 0;
				__masked = false;
			}
		}

		public static int CacheAll() {
			ClearCache();
			var db = LuaDatabase.sharedInstance;
			var L = db.GetLuaState();
			var top = db.GetLuaTop();
			try {
				db.PushDataset( DBName );
				using ( var gbuff = Common.GlobalBuffer<int>.Get() ) {
					LuaDatabase.LuaTable_iForEach( L,
						( _L, id ) => {
							using ( var q = db.CreateQuery( -1, DBName ) ) {
								var value = ReadOne( q, id );
								if ( value != null ) {
									m_idCache.Add( id, value );
									gbuff.Add( id );
								}
							}
						}
					);
					gbuff.Sort();
					m_ids = new IKeys( gbuff.ToList() );
				};
			} finally {
				db.SetLuaTop( top );
			}
			return m_idCache.Count;
		}

		public static void ClearCache() {
			m_idCache.Clear();
			m_ids = null;
		}

		public static int Sweep( bool force = false ) {
			return 0;
		}

		public static IKeys GetKeys( Comparison<int> pred = null ) {
			if ( m_ids == null ) {
				m_ids = new IKeys( LuaDatabase.sharedInstance.GetDatasetIKeys( DBName, true, pred ) );
			}
			var ids = m_ids;
			if ( pred != null ) {
				int count = m_ids.Count;
				var _ids = new List<int>( count );
				for ( int i = 0; i < count; ++i ) {
					_ids.Add( m_ids[i] );
				}
				_ids.Sort( pred );
				ids = new IKeys( _ids );
			}
			return ids;
		}

		static Pet ReadOne( LuaDatabase.Query q, int id ) {
			if ( q.IsTable() ) {
				var temp = new Pet();
				var __mask = DBCache.LoadCurrentFieldMask( q, __masked );
				temp.m_id = id;
				temp.m_back_vfx = __mask[ 0 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_back_vfx, 8 ) : __default.m_back_vfx;
				temp.m_baseskill = __mask[ 1 ] ? q.GetInt( DBCache.FID_baseskill, 9 ) : __default.m_baseskill;
				temp.m_bornskill = __mask[ 3 ] ? q.GetInt( DBCache.FID_bornskill, 9 ) : __default.m_bornskill;
				temp.m_cast_vfx = __mask[ 4 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_cast_vfx, 8 ) : __default.m_cast_vfx;
				temp.m_critical_ex = __mask[ 5 ] ? q.GetInt( DBCache.FID_critical_ex, 11 ) : __default.m_critical_ex;
				temp.m_desc = __mask[ 6 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_desc, 4 ) : __default.m_desc;
				temp.m_hyper_varatk_ex = __mask[ 8 ] ? q.GetInt( DBCache.FID_hyper_varatk_ex, 15 ) : __default.m_hyper_varatk_ex;
				temp.m_hyper_varblood_ex = __mask[ 9 ] ? q.GetInt( DBCache.FID_hyper_varblood_ex, 17 ) : __default.m_hyper_varblood_ex;
				temp.m_model_angle = __mask[ 11 ] ? q.GetInt( DBCache.FID_model_angle, 11 ) : __default.m_model_angle;
				temp.m_model_hight = __mask[ 12 ] ? q.GetInt( DBCache.FID_model_hight, 11 ) : __default.m_model_hight;
				temp.m_pet_quality = __mask[ 13 ] ? q.GetInt( DBCache.FID_pet_quality, 11 ) : __default.m_pet_quality;
				temp.m_pet_talent_max = __mask[ 15 ] ? q.GetFloat( DBCache.FID_pet_talent_max, 14 ) : __default.m_pet_talent_max;
				temp.m_peticon = __mask[ 16 ] ? q.GetInt( DBCache.FID_peticon, 7 ) : __default.m_peticon;
				temp.m_petmodel = __mask[ 17 ] ? q.GetInt( DBCache.FID_petmodel, 8 ) : __default.m_petmodel;
				temp.m_petmodel_scale = __mask[ 18 ] ? q.GetFloat( DBCache.FID_petmodel_scale, 14 ) : __default.m_petmodel_scale;
				temp.m_petmodel_scale_ui = __mask[ 19 ] ? q.GetFloat( DBCache.FID_petmodel_scale_ui, 17 ) : __default.m_petmodel_scale_ui;
				temp.m_petname = __mask[ 20 ] ? Dataset.DecodeToLocalizedString( q, DBCache.FID_petname, 7 ) : __default.m_petname;
				temp.m_petradius = __mask[ 21 ] ? q.GetFloat( DBCache.FID_petradius, 9 ) : __default.m_petradius;
				temp.m_pettype = __mask[ 22 ] ? q.GetInt( DBCache.FID_pettype, 7 ) : __default.m_pettype;
				temp.m_proctectedSkill = __mask[ 23 ] ? q.GetInt( DBCache.FID_proctectedSkill, 15 ) : __default.m_proctectedSkill;
				temp.m_recovery = __mask[ 24 ] ? q.GetInt( DBCache.FID_recovery, 8 ) : __default.m_recovery;
				temp.m_RunSpeedBase = __mask[ 25 ] ? q.GetFloat( DBCache.FID_RunSpeedBase, 12 ) : __default.m_RunSpeedBase;
				temp.m_RunSpeedScale = __mask[ 26 ] ? q.GetInt( DBCache.FID_RunSpeedScale, 13 ) : __default.m_RunSpeedScale;
				temp.m_show4 = __mask[ 27 ] ? q.GetInt( DBCache.FID_show4, 5 ) : __default.m_show4;
				temp.m_showplane = __mask[ 28 ] ? q.GetInt( DBCache.FID_showplane, 9 ) : __default.m_showplane;
				temp.m_talk1 = __mask[ 29 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_talk1, 5 ) : __default.m_talk1;
				temp.m_talk2 = __mask[ 30 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_talk2, 5 ) : __default.m_talk2;
				temp.m_type = __mask[ 31 ] ? q.GetInt( DBCache.FID_type, 4 ) : __default.m_type;
				temp.m_vfx_slot = __mask[ 32 ] ? Dataset.DecodeToDatabaseString( q, DBCache.FID_vfx_slot, 8 ) : __default.m_vfx_slot;
				PetEx.IsValid_BornBuff = __mask[ 2 ];
				PetEx.IsValid_giveSoulNumWeight = __mask[ 7 ];
				PetEx.IsValid_MasterToPet = __mask[ 10 ];
				PetEx.IsValid_pet_skill_roll = __mask[ 14 ];
				if ( PetEx.onLoadComplexField_BornBuff != null ) {
					PetEx.onLoadComplexField_BornBuff( temp, q );
				}
				if ( PetEx.onLoadComplexField_giveSoulNumWeight != null ) {
					PetEx.onLoadComplexField_giveSoulNumWeight( temp, q );
				}
				if ( PetEx.onLoadComplexField_MasterToPet != null ) {
					PetEx.onLoadComplexField_MasterToPet( temp, q );
				}
				if ( PetEx.onLoadComplexField_pet_skill_roll != null ) {
					PetEx.onLoadComplexField_pet_skill_roll( temp, q );
				}
				return temp;
			}
			return null;
		}

 		public static Pet Get( int id ) {
			if ( id == 0 ) {
				return null;
			}
			Pet ret = null;
			if ( m_idCache.TryGetValue( id, out ret ) ) {
				return ret;
			}
			var db = LuaDatabase.sharedInstance;
			int tableIndex = db.PushDatasetValue( DBName, id );
			var L = db.GetLuaState();
			if ( L.IsTable( tableIndex ) == false ) {
			    L.Remove( tableIndex );
			    Common.UDebug.LogError( "{0}[{1}] is nil", DBName, id );
			    return null;
			}
			using ( var q = db.CreateQuery( tableIndex, DBName ) ) {
				var temp = ReadOne( q, id );
				if ( temp != null ) {
					m_idCache.Add( id, temp );
					return temp;
				}
			}
			return null;
		}

		const int VersionHash = 0x1307e312;
		#endregion
	}

	public partial class PetEx {
		public delegate void LoadComplexField( Pet data, LuaDatabase.Query q );
		internal static bool IsValid_BornBuff = true;
		static LoadComplexField OnLoadComplexField_BornBuff = null;
		public static LoadComplexField onLoadComplexField_BornBuff {
			get {
				return OnLoadComplexField_BornBuff;
			}
		}
		internal static bool IsValid_giveSoulNumWeight = true;
		static LoadComplexField OnLoadComplexField_giveSoulNumWeight = null;
		public static LoadComplexField onLoadComplexField_giveSoulNumWeight {
			get {
				return OnLoadComplexField_giveSoulNumWeight;
			}
		}
		internal static bool IsValid_MasterToPet = true;
		static LoadComplexField OnLoadComplexField_MasterToPet = null;
		public static LoadComplexField onLoadComplexField_MasterToPet {
			get {
				return OnLoadComplexField_MasterToPet;
			}
		}
		internal static bool IsValid_pet_skill_roll = true;
		static LoadComplexField OnLoadComplexField_pet_skill_roll = null;
		public static LoadComplexField onLoadComplexField_pet_skill_roll {
			get {
				return OnLoadComplexField_pet_skill_roll;
			}
		}
	}
}
//EOF
